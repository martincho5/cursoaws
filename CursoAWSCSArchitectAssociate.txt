Apuntes AWS

5 pilar de un buen Architecture - Costs, Performance, Reliability, Security, Operational Excelence.

Regions - Cluster of DataCenters
AWS - Availability Zones
Min 2, Medio 3, Max 6. (2a - AZ letter)
Alta conectividad entre cada AZ

IAM is Global, no Region Selection (like Billing)

Root Account should never be used (and shared)
User
Groups
Roles for Machines or AWS resources
Policies write in JSON - Agrupa los 3 UGR

MFA - IAM - managed Policites
User minimal amount - Lease privilege principles
IAM Federation - Como AD / SAML
IAM por persona
Un Role para Aplicación
IAM credentials no deben compartirse
IAM credential nunca escribir en codigo.
ROOT account solo para setuo inicial - nunca usar root IAM Credentials.
-------------
EC2 - VM
EBS - Storage de VMs
ELB - Load Balancing across VMs
ASG - AutoScalling Group
AMI - Amazon Machine Image
For Certification use Amazon Linux 2 - es lo nuevo
Network - es un VPC y la Subnet es en que Availability Zone va a ir
Security Group - Firewall
Tiene Rules de Inbound and Outbound
Para multiples Instancias en un SG.
Los Security Group son por Region/VPC. Se tiene que crear por región

1 SG solo para el acceso SSH

- EC2
 - Stop
 - Reboot
 - Terminate (no quiero nada más - se borra)
EC2 Instance Connect - Conectarme a la instancia desde un navegador.
Default user ec2-user
Linux chmod 0400 keyname - Cambiarlo
ssh -i EC2Tutorial.pem ec2-user@18.221.68.113
Poner solo el usuario y sacar la herencia.
Mi usuario full access.
Connection Timeout - SG problem
EC2 instance connect solo funciona con AMI 2 de Linux

Si da time out --- es un problema de Security Groups
Si da Connection refused --- error de aplicacion o no fue lanzada la app

Un SG puede autorizar a otro SG.
-----------
Private vs Public IP.
Elastic IPs - es una IP fija para el EC2 para una sola instancia.
5 Elastic IP en toda la cuenta - 
Evitar el uso de Elastic IP - Usar mejor un DNS.
O usar un Load Balancer.
---------------------
EC2 User Data Script - Corre con root
Cuando realiza el primer booteo
Cuando se crea la instancia en Configure Instance Details
Advanced Details
Está User Data
Se escribre - As Text
Primero el bin
Corre con el comando sudo
-------
- On Demand - Se paga por lo que usar. Solo prendida. Es la más cara. Para elastic Workload
- Reserved:
  - Reserved - 75% discount / Pay upfront from 1 or 3 years (Like Database)
  - Convertible Reserved Instances - Puede cambiarse el EC2 Instance Type - 54%
  - Scheduled Reserved Instances - Launch within time window you reserve / Fraction of day/Week/month
- Spot Instances: discount upto to 90% compared to On-Demand
  - Las instancias pueden perderse en cualquier momento del tiempo si el max price is less than the current spot price. 
  - The MOST cost-efficient instances in AWS
  - Para - Batch Jobs, Data analysis, image processing. Que se pueda
  No para Databajes or un Job Critical.
  Combo - Reserved Instance for baseline + On-Demand & Spot for peaks.
- Dedicated Instances: (Van en examen)
  HW dedicated to you
  Share HW with instances in same account
  No control over instalnce placement
- Dedicated Hosts:
  Full Control, visibilidad del socket.
  Por 3 años y physical dedicated EC2
  BYOL - More expensive
------------------
EC2 Spot Instance
 - max spot price mientras el precion se menor
 Spot Block
 - 1 to 6 hours - Se tiene ese bloque sin interrupciones. (para Batchs)
Spot Request
- Max price
- Number of instances
- Launch specification
- Request type: one-time | persistent
- Valid from, Valid until
Cancelar un Spot Request no termina la instancia. 
1ero - Cancelar el Spot Request y después terminar las spot instance asociadas.
Spot Fleets
 - Spot Fleets = set of Spot Instances + (optional) On-Demand Instances
 - The Spot Fleet will try to meet the target capacity with price constrains
 - Definir los launch pools tipo de instancia, OS, Availability Zone
 - Se pueden tener multiples launch pools para que Fleet pueda elegir
 - Spot Fleets deja de lanzar instancias cuando llega a las capacidad o al costo máximo
 Estrategias
  - LowestPrice: Del pool que tenga el precio más bajo (optimización de costos, trabajos cortos)
  - diversified: distributed a través de todos los pools (para Availability y trabajos largos)
  - CapacityOptimized: capacidad óptoma para el número de instancias.
Spot Fleets permite solicitar spot instance de forma automática con el precio más bajo.
--------------------
EC2 - Instance Type
R:Aplicación que necesitan RAM - in memory caches
C:aplicacion para CPU
M:aplicanciones balanced
I:aplicaciones que son buenas en I/O
G:aplicaciones que necesitan Group

T2/T3:burstable instances (up to a capacity).
T2/T3: unlimited burst.

T2/T3 - Cuando está funcionando igual
      - burst credits, el CPU se vuelve terrible.
      - Son buena para un pico de vez en cuando, pero es por crédito de burst.
      - Si la máquina deja de burstear, los creditos se acumulan en el tiempo.
T2/T3 unlimited burst
  - Desde Nov 2017
--------------------------------
AMI
 - Para Linux o Windows
 - Pre installed packages
 - Viene con monitoreo
 - Con Seguridad
 - Instalar AD
 - Instalar apps
 - optimización
 - AMI es solo para una región específica
Public AMI
 - Se pueden compar
AMI Storage
 - Vive en un Amazon S3
 - Las AMI son private 
AMI Pricing
 - Van el el Storage S3
 - Remover los AMIs que no usamos
Se puede compartir las AMI con otra cuenta de AWS
Compartir la AMI no afecta el ownership de la AMI
Si copias una AMI compartida, sos el dueño de la nueva AMI
Para copiar la AMI compartida conmigo, me tiene que dar el dueño de la AMI, permisos de lectura sobre el almacenamiento donde está la AMI, EBS Snapshot o el bucker de S3.
Limitaciones
No se puede copiar una AMI encriptada.
No se pueden copiar AMI que tengan asociadas un billingProduct code. Incluye Windows AMIs y AMIs from AWS Marketplace
Para Copiar una share AMI con billing product, se lanza una instancia EC2 en mi cuenta usando la AMI compartida y luego creamos una AMI de esa instancia.
---------------------
Placemente Groups
 - Se quiere tener control de donde quedan las instancias de EC2
 - 3 Strategies
   . Cluster - cluster instances en un grupo de baja latencia en una sola Availability Zone
   . Spread - spread las instacias entre diferente hardware con un máximo de 7 instacias por grupo de AZ) - Para aplicaciones críticas.
   . Partition - spread instances en diferentes particiones (en diferentes racks) en una AZ. Hasta 100s de EC2 instance (Hadoop,Cassandra,Kafka)
 - Cluster
   Están en el mismo Rack y el mismo AZ
    Pros: Great network - 10 Gbps
    Cons: Si el rack falla, todas las instancias fallan al mismo tiempo.
    Use Case: Big Data Job/App con low latency y high network.
 - Spread
   Todas en diferentes HW
    Pros: Van en diferentes AZ, Reduce el riesgo de falla, EC2 en diferente HW
    Cons: Hasta 7 instancias por AZ por placemente group.
 - Partition
   Cada particion, son diferentes racks
    Pros: Hasta 7 particiones por AZ, Hasta 100s of EC2 instances, La instancia de una particion no comparte el rack con otra particion, Si falla una partición afecta a varias EC2, EC2 accede a la metadata de la partition.
    Use casds: HDFS, Cassandra, Kafka

ENI (Elastic Network Interfaces)
 - Representa a una Virtual Network Card 
   Puede tener - One Elastic IP
   Private IPv4.
 - Se pueden crear ENI indepdendintes y atachar on the 
 - Bound to specific AZ.
 - Eth0 no puede ser detachada
EC2 Hinernate
 - Stop: la Data en el disco sigue intacto.
 - Terminate: borra todo
 - Hibernate: La data en la Ram se preserva. Bootea más rápido. Se baja la ram en un root EBS volume
   Servicios que toman mucho tiempo en volver a insta
   Hibernate solo soportado por C3,C4,C5,M3,M4,M5,R3,R4 y R5 (CMR)
   RAM menos de 150 Gb.
   No soportado para bare Metal 
   AMI: Linux 2, Linux AMI, Ubuntu y Windows
   RootVolume debe ser EBS encriptado
   Solo para On-Demand y Reserved instance (no para Spot)
   No más de 60 días.
........
EC2 for solutions architects
 - EC2 son facturadas por segundo, t2.micro es free
 - En Linux/Mac ssh y windows putty
 - SSH port 22 y solo a mi IP
 - Timeout issues - Problema de Security Group
 - Permission issues on the SSH key - run chmod 0400
 - Security Groups pueden referenciar a otros security groups en vez de rangos de IPs
 - Diferencias entre Private, Public y Elastic IP
 - EC2 User data
 - 4 EC2 launch modes:
   - On Demand
   - Reserved - Por 1 años a 3 años
   - Spot instances - Se pueden apagar
   - Dedicated Hosts - Licence restricted.
 - Basic instances (R,C,M,I,G,T2/T3)
 - Create AMIs faster booteo
 - AMI puede copiarse entre regiones y cuentas
 - EC2 - Placement Groups: Cluster / Spread.
##################################################33
High Availability and Scalability
- Scalability es que una aplicación puede soportar grandes cargas adaptandose
  2 tipos: Scalability Vertical y Horizontal (elasticity)
Vertical Scalability
 - Increase a size of a instance. paso de t2.micro a t2.large.
   Para sistemas no distribuidos como Bases de Datos, RDS, ElastiCache. Limite de Hw.
Horizontal Scalability
 - Aumentar el número de instancias
 - Es para sistemas distribuidos, muy común en apps web y modern apps.
High Availability
 - Correr tu aplicacion o sistemas en al menos 2 datacentes - Availability Zone
 - Para que siga corriendo en caso de caida de un DC.
 EC2 - Vertical Scaling: t2.nano vs u-12tbl.emtal
     - Horizontal Scaling: Auto Scaling Group, Load Balancer
     - High Availability: Auto Scaling Group multi AZ, Load Balancer multi AZ.

Load Balancing
 - Forward internet traffic to multiple servers
 - Spread Load
 - Expose a single point of access DNS to appl
 - Seamlesly handle failures of downstream instances
 - Do regular health checks
 - Provide SSL Termination for websites
 - Enforce stickiness with cookies
 - HA across zones
 - Separate pulbic traffic from private traffic
 ELB (EC2 Load Balancer)
  - AWS guarantess that it wil be working
  - AWS takes care of upgrade, maintenance, ha
  - AWS provides only a few configuration knobs
  - It costs less
  - integrate with many AWS
Health checks every 5 seconds
  - Verifica que la instancia esté disponible y contestando los requests
  - El health check se hace sobre un puerto y una ruta (/health generalmente)
  - Si no es 200 (OK) la instancia la deja unhealth
3 Tipos de Load Balancer on AWS
 - Classic Load Balancer (v1 - old generation) - 2009
   HTTP, HTTPS y TCP
 - Application Load Balancer (v2 - new generation) - 2016
   HTTP, HTTPS, WebSocket
 - Network Load Balancer (v2 - new generation) - 2017
   TCP, TLS (secure TCP) & UDP
Recomendado utilizar los v2 generation
2 Tipos, internal (private) o external (pulbic)
Load Balancer Security Groups
 - Ponemos una App Security group que solo permitimos el acceso del Load Balancer al servidor EC2
El más seguro.
LB (Load Balancer) cosas a saber
 - LBs pueden escalar pero no instantaneamente
 - Troubleshooting
   - 4xx errores de cliente
   - 5xx errores de aplicacion
   - 503 problema de capacidad o no hay targets registrados
 - Monitoring
  - ELB tiene un access log para todos los accesos
  - CloudWatch Metric da estadísticas agregadas.
Classic
 - Soporta TCP (Layer 4), HTTP y HTTPS (Layer 7)
 - Health Checks TCP o HTTP
 - Fixed hostname -
Application LB
 - Appl y Layer 7 (HTTP)
 - Load balancing to multiple http apps across machines (target group)
 - Load balancing to multiple app on the same machine (Containers)
 - Support HTTP/2 and WebSocket
 - Suppor redicts from HTTP to HTTPs
 - Routing tables to different targent groups:
   - Routing base on path in URL
   - Routing based on hostname in URL
   - Routing based on Query String, Headers.

   ALB son muy bueno para micro servicios y applicaciones de contenedores
   Port mapping feature to redirect to a dinamic port
   En comparación, necesitamos multiples CLB por aplicación.
 Target Groups
  - EC2 instances (managed by auto scaling group) - HTTP
  - ECS tasks - HTTP
  - Lambda functions - HTTP request is translated into a JSON
  - IP Addresses

Good to know
 - Fixed hostname (xxx.region.elb.amazonaws.com)
 - The app server don't see the IP of teh cleint direct
   - inserted in the header X-Forwarded-For
   - Para el puerto X-Forwarded-Port y el proto (X-Forearded-Proto)
NLB - Network Load Balancer
- Es Layer 4:
  - Forward TCP & UDP Traffic to you instances.
  - Maneja millones de request por segundo
  - Menos de 100 ms de latencia (en ALB son 400 ms)
- NLB tien una IP estática por AZ, y soporta la asignación de Elastic IP
  - Para extrem performance o TCP o UDP
  - No está incluido en EC2 free tier.
Load Balancer stickiness
 - Same client to same instance.
 - Trabaja con Clasic Load Balancers y Application Load Balancer.
   La cookie tiene un día de expiración que uno controla.
   Se usa para que el usuario no pierda sus datos de session
   Trae un imbalance, puede que una EC2 mayor carga que otras.
   Se configura en el ALB en el target group
Cross-Zone Load Balancing
 - Cada Load Balancer está distribuido a través de todas las instancias registrada en todas las AZ.
 Sin Cross-Zone se tiene un NLB en cada zona.
 En Classic Load Balancer
  - Disabled by Default
  - No charges for inter AZ data si es tá habilidado
 En Application Load Balancer
  - Siempre activo
  - No charge for inter AZ data
 En Network Load Balancer
  - Disabled by Default
  - Pay Charges for inter AZ
Elastic Load Balancer
SSL/TLS - Basics
  - SSL - in-flight encryption - Secure Sockets Layer
  - TLS sin los usados pero se los llama SSL
  - Public SSL are issued by CA.
  - Deben renovarse
  - El Load Balancer usa los X.509 certificate.
  - Se pueden administrar los certificados usando ACM (AWS Certificate Manager)
  - Se puede subir nuestro certificado.
  - HTTPS Listener:
    - Especificar el certificado por defecto
    - Agregar una lista opcional de certs para soportar multiples dominios
    - Clientes puede usar SNI (Server Name Indication) para especificar el hostaname
    - Especificar security policy para soportar versiones viejas de SSL/TLS
  SSL - Server Name Infication
   - SNI solves the problema of loading multiple SSL certificates onto one web server (para servir multiples websites)
   - El cliente infica el hostname del servidore de destino en el handshake inicial de SSL
   - El servidor encuentra el certificado correcto o devuelve el default.
   - Solo funciona con ALB & NLB, CloudFront
   - No funciona con CLB
  CLB - Solo 1 certificado SSL / se usan multiples CLB para multiples hostnames.
  ALB v2 - Multiple listeners with multiple SSL certificates / usa SNI
  NLB v2 - Multiple listeners with multiple SSL certificates / usa SNI
Connection Draining
 - CLB: Connection Draining
 - Target Group: Deregistration Delay (ALB & NLB)
   - Es el tiempo para completar las requests que tiene mientras la instancia es de-registrada o unhealthy
   - Stop sending new requests porque se está de-registering
  Espera para finalizar la conección por default 300 sec y se puede customizar entre 1 y 3600 sec.
   Pude deshabilitarse si el valor es 0.
Auto Scaling Group (ASG)
 - Sirve para 
   - Scale out (agregar instancias EC2) para incrementar la carga
   - Scale in (remover instancias EC2) para bajar la carga.
   - Decrecer o incremente hasta un máximo.
   - Automatically regsitrar nuevas intancias en el load balancer.
 - Desired Capacity - Actual Size.
    - Scale out - agrega instancias / Scale in - remuve instancias
 - Atributos del ASGs.
   - Configuración de inicio:
      - AMI + Tipo de instancia
      - EC2 user data
      - EBS volumes
      - Security Groups
      - SSH Key Pair
   - Min / Max / initial capacity
   - Network + Subnets
   - Load Balancer Information
   - Scaling Policies
 - Alarms
  - Se puede escalar basado en alarmas de CloudWatch
  - Se pueden crear
 - New Rules
  - Es posible definir mejores reglas de auto scaling en EC2
    - Average CPU Usage
    - Number of requests on the ELB per instance.
    - Promedio de trafico de red entrente
    - Promedio de trafico de red saliente
  - Son fáciles para setup
  - Custom Metric (ASG)
    - Se puede auto escalar basado en métricas propieas.
      Enviar metricas customizadas desde la aplicación en EC2 al cloud watcht
      Crear una alarama de CloudWathc
      Usar el CloudWatch alarm para sacar e scaling policy
  - ASG use launch configuration or Launch Templates
  - Para actualizar loa ASG, hay que proveer una nueva configuración
  - IAM roles atachados en una ASG son asignados a la instancia de EC2
  - ASG es gratis. Se paga por otros recursos que son lancazdos
  - Ha
 ----
En el AutoScalling Group tenemos el launch template es el nuevo y configuration es la versión viejas
Launch Template permite spot y configuration un solo tipo de máquina
Auto Scaling Groups - Scaling Policies
Target Tracking Scaling
 - Most simple and easy to set-up
Simple/ Step scaling
 - When a CloudWatch alarm is triggered (example C PU > 70%), entonces agregá 2 unidades
 - When a CloudWatch alarm is triggeres then remove si pasa algo, remover 1 unidades
Scheduled Actions
 - Anticipate a scaling based on know usage patterns
 - En un horario especifico se sube la capacidad mínima
Scaling Cooldown
 - The cooldown period ayuda a asegurar que el auto scaling group no lance y termine instancias adicionales antes que tome efecto la actividad previa.
 - Se puede crear para simple scaling policy.
 - override el default cooldown period.
 - El default cooldown es de 300 segundos, se puede bajar a 180 segundos.
LifeCycle Hooks
Pending: Wait to Pending:Proceed para verificar cosas.
Terminating:Wait to terminating:Proceedr para extraer cosas antes de bajarla.

Diferencias entre Launch template vs Launch configuration
 - Launch Configuration (legacy) se recrea cada vez que se cambiarse
 - Launch Template (newer) Puede tener multiples versiones, crear parametrops y usar on-demand and spot intances o un mix de ambas.
 - Usar el T2 y recomended by AWS going forward.
-----------------------------
EBS volume
EBS (Elastic Block Storage) Volume es un drive de red que se puede atachar a una instania que está corriendo.
Los datos persisten.
 - Es un network drive. Puede haber latencia.
 - Se puede desatacher a una instancia y atachar a otr rápidamente
 - Solo puede ser usado en el AZ que fue creado, no se puede attachar a otro AZ
 - Se puede mover entre AZ, pero hay que hacer un snapshot.
 - Cuando se crea pide el tamaño y los IOPS necesarios - Se cobra por la capacidad entera, no por el uso.
 - Se puede incrementar la capacidad hacia adelante. Empezar chiquito.
EBS volumen 4 tipos:
 - GP2 (SSD) - SSD de proposito general para variadas cargas
 - IO1 (SSD) - Alta performance, mission critical low-latency
 - ST1 (HDD) - Bajo costo para acceso frecuente. carga intensiva
 - SC1 (HDD) - Bajo costo diseñado para baja carga
Son caracterizados por Tamañano, Thoughput, IPOS 
Solo los GP2 y IO1 pueden ser usados como boot volumes.
EBS - Volume Types Use Cases
 - GP" - de 1 Gb a 16 Tb      

--------------------------
Tipos de Volumenes EBS
GP2
 - Recomendado para la mayoria de los Worloads
 - Para boot del sistema
 - Para VDI
 - Aplicaciones con baja latencia
 - Ambientes de Desarrollo y Test.
 - De 1 GB a 16 TB 
 - Pequeños GP2 pueden llegar a un pico de IOPS de 3000
 - Max IOPS 16.000, pero se dan 3 IOPs por GB eso quiere decir que cuando tengamos 5.334 GB estamos en el máximo de IOPS
 El burst para que se tenga en cuenta tiene que ser el tamaño menor a 1000 GB
 Si tengo un tamaño de 16384 las IPS son 16.000 poque es mayor a 5333 GB.
IO1
 - Para aplicaciones críticas, más de 16000 IOPS por Volumen
 - Para Bases de Datos Grandes - Mongo, Cassandra, MS SQL, MySQL, Postgres, Oracle
 - De 4 a 16 TB
 - IOPS is provisioned (PIOPS) - Min 1000 Max 64000 (nitro instances) para el resto 32.000 el máximo.
   El máximo ratio de PIOPS es de 50:1
ST1
 - Para Streaming workloads con fast throughput a bajo precio
 - Big Data, Data Warehouse, Log processing
 - Apache Kafka
 - No puede ser boot
 - De 500 Gb a 16 TB
 - Max IOPS es 500 / throughput máximo 500 MiB/s
SC1
 - Volumenes grandes que no son accedidos con frecuencia
 - Escenarios donde el costo de almacenamiento sea bajo
 - No pude ser booteable
 - de 500 Gb a 16 TB
 - Max IOPs is 250
 - Max throughput 250 MiB/s
Resumen
 - GP2 - General Purpose (cheap)
 - IO1 - Provisioned IOPS (expensive)
 - st1 - Throughput Optimized HDD
 - sc1 - Cool HDD

EBS Snapshots
 - Incremental - solo los bloques que se cambian
 - EBS backups usan IO con lo cual no hay que realizarlo cuando hay mucho tráfico en la aplicación
 - Son grabados en S3
 - No es necesario detachar el volumen para hacer snapshot, pero se recomiendo
 - Máximo de 100.000 Snapshots
 - Se pueden copiar Snapshots entre AZ o regiones
 - Se pueden hacer AMI de un Snapshot
 - Un volumen restaurado de un snapshot debe ser pre-warmed (usando fio o dd para leer todo el volumen)
 - Se pueden automatizar con Amazon Data Lifecycle Manager.
EBS Migration
 - EBS volume solo en su AZ
 - Para migrarlo, Snapshot, copya el volumen a otra región diferente, crear un volumen del snapshot en la Az que elegimos.
EBS Encription
 - Data at rest es encriptada en el volumen
 - Todo los datos on the fly entre la instancia y el volumen están encriptados
 - Todos los snapshots están encriptados.
 - Todos los creados del snapshot tambíen están encriptados.
 La encripción y desencripción se maneja en forma transparente.
 Encryption tiene un impacto mínimo en la latencia
 EBS encription key KMS (AES-256)
 Copiar un snapshot desencritado, permite encriptarlo
Encriptar un EBS no encriptado.
 - Crear un EBS de un snapshot del Volumen.
 - Encriptar el EBS Snapshot (usando copy)
 - Crear un nuevo EBS volume del snapshot (el volumen va a estar encriptado)
 - Atachar el volumen encriptado a la instancia original.
Diferencias entre EBS vs Instance Store
 - Algunas instancias no vienen con Root EBS volume
 - Instance store está atachado físicamente a la máquina
 - Pros - Better I/O, Good for buffer, cache, scractch data / Data sobrevive al reboot.
 - Cons: Con el Stop o Termination, El instance store se pierde. No se puede agrandar on the fly. Los backups los tiene que hacer el usuario
Local EC2 Instance Store
 - Very High IOPS
 - Disk Attached to physical server
 - Hasta 7,5 Tb.
 - Es un Block Storage (Como el EBS)
 - No se puede incrementar el tamaño.
 - Riesgo de que los datos se pierdan si el hw falla.
EBS RAID Options
 - EBS se replica en el AZ.
 - Si queremos llegar a 100.000 IOPS?
 - Mirror porque no confio en EBS.
 - RAID es posible si tu SO lo soporta.
 - RAID 0 y 1 OK
 - RAID 5 y 6 no recomendados para EBS.
 RAID 0 y RAID 1
 - RAID 0 incrementa la performance.
 - Si un disco falla, los datos se pierden.
 - Discos Grandes con muchos IOPS.
 - RAID 1 para fault tolerance
 - Se escribe en ambos al mismo tiempo.
 - 2x network - Mejor el throughput .
EFS Overview
 - Elastic File System
   - Managed NFS que puede ser montado en varios EC2.
   - EFS trabaja con EC2 en Multiples AZ.
   - Alta disponibilidad, escalable, caro (sale 3x gp2), se paga por uso.
   - Casos de uso: Content Managment, web serving, data sharing, Wordpress
   - NFSv4.1 protocol
   - Security Group para controlar el acceso al EFS.
   - Compatible con Linux base AMI (not windows)
   - Encription at rest
   - Para POSIX File systemas standard file API
   - File system scala automáticamente, no es necesario un capacity planning
 - EFS Scale
   - 1000s of concurrent NFS client, 10 GB+/s throughput
   - Grow hasta petabytes automaticamente.
 - EFS performance mode (se especifica cuando se crea)
   - Proposito general: sensible a la latencia (web server)
   - Max I/O - higher latency (big data, media processing)
 - Storage Tiers (Lifecycle Managment feature - moveing files after N days)
   - standard - Frequently access files
   - Infrequent access (EFS-IA): costo mayor para leer archivos, baja el precio de almacenamiento.
EBS vs EFS
 - EBS Volume
   - attach a un instancia por vez.
   - Solo en 1 AZ
   - Para migrarlo, tomar snapshot, restaurar el snapshot en otro AZ
   - Root EBS se terminan cuando se termina una instancia ECs (se puede deshabilitar)
 - EFS 
   - Mounting 100s of instances across AZ.
   - EFS share website files
   - Only Linux
   - EFS-IA para bajar el costo.
   - Por uso se paga.
######################################
AWS RDS
 - RDS - Relational Database Service
 - Es una DB manejada para DBs que usan SQL query language.
 - Creadas DBs en la nube
   - Postgres, MySQL, MariaDB, Oracle, MS SQL, Aurora
 RDS vs EC2 instance.
  - RDS es una servicio administrado:
     - Provisionamiento automático, patching OS
     - Continous backups and restore
     - Dashboard de monitoreo
     - Lectura de réplicas para mejorar la performance de lectura
     - Muti AZ for DR (Dissaster Recovery)
     - Ventanas de mantenimiento para upgrades
     - Capacidad de escalar (vertical y Horizontal)
     - almacenamiento por EBS (gp2 o IO1)
     But you can't ssh into your instances.
  - RDS backups
     - Soy activados en forma automática
     - Daily full backup
     - Transaction logs backup cada 5 minutos
     - 7 days retention by default (se puede incrementar a 35 días)
     DB snapshots
      - Ejecutados en forma manual por el usuario.
      - Los backup por lo más largo que uno quiera.
 RDS Read Replicas for read Scalability
  - Se pueden crear hasta 5 Replicas de Lectura
  - Entre las misma AZ, Cross AZ o Cross Region.
  - Replica Asincronica para que las lecturas sean eventualmente consistentes.
  - Las replicas puede promoverse como DB owner.
  - La aplicación hay que cambiarla el connection string para que la lecturas vayan a las replicas.
 RDS Read Replicas - Use Cases
  - Queremos realizar Reportes y algo de analítica.
  - Creamos una replica de lectura y los reportes los busca ahí.
  - En una Read Replica solo soporta SELECT.
 RDS Read Replicas - Network cost
  - En AWS hay un costo de red cuando se va de una Az a otra Az.
  - Para ahorar puedo tener la replica en la misma Az. No tiene costo en la misma Az.
 RDS Multi AZ (Disaster Recovery)
  - Sync replication en AZ B - En standby.
  - One DNS name - Failover automático
  - Sirve en caso de Falla de AZ, perdida de red, instancio o falla de almacenamiento.
  - No hay que hacer intervención en las apps.
  - No es para scaling, está en standby.
  - Las Read Replicas pueden setearse como Multi Az for DR.
 RDS Security - Encryption
  - At Rest Encryption
    - Encripta el master y la replica con AWS KMS - AES-256
    - Se define la encripción en el momento del inicio.
    - Si el master no está encriptado, la réplica tampoco puede.
    - Trasparent Data Encryption (TDE) disponible para Oracle y SQL Server.
  - In-flight encryption
    - Certificados SSL para encriptar datos a RDS in flight.
    - Brinda SSL con certificados de confianza cuando se conecta a la base de datos.
    - Para forzar SSL:
       - PostgresSQL: rds.force_ssl=1 en AWS RDS Console
       - En MySQL, en la DB: GRANT USE ON *.* TO 'mysqlyser'@'%' REQUIRE SSL;
  - RDS Encryption Operations
    - Encriptad backups
      - Snapshot de una base no encriptada, no está encriptado.
      - Snapshot de una base encriptada, encripta los mismos.
      - Se puede copiar un snapshot en uno encriptado.
    - Como encriptar una RDS database no encriptada:
      - Se crea un snapshot de la bd
      - Copiamos y lo tenemos encriptado.
      - Restauramos la base de datos encriptada del snapshot
      - Migramos las Apps a la nueva base de datos y borramos la vieja.
  - RDS Security - Netwrok & IAM
    - Network Security
      - RDS en un private subnet.
      - RDS le deja la seguridad a los security groups (Como EC2)
    - Access Management
      - IAM policies permiten controla quien administra AWS RDS (through the RDS API)
      - Se puede usar user and password para login en la DB.
      - IAM based autentication puede ser usuado en MySQL y PostgreSQL.
  - RDS - IAM Authentication
    - Funciona con MySQL y PostgresSQL
    - Se maneja con autentication token que se obtiene con las RDS API Calls.
    - Auth token tiene una vida de 15 minutos
    - Beneficios
      - La comunicación de Red de entrada y salida está encriptada con SSL.
      - IAM para manejar los usuarios en forma centralizada.
      - Se puede dejar IAM Roles y EC2 profiles para integración sencilla.
  RDS AWS responsability:
   - No SSH access
   - No Manual DB patching
   - No manual OS patching
   - No way to audit the undelying instance.

Aurora Overview
 - Es una tecnología propietaria de AWS.
 - Postgres y MySQL son soportadas en AuroraDB
 - Aurora es AWS Cloud Oprimized - 5x performances mysql y 3x contra Postgres.
 - El almacenamiento crece en forma incremental de 10 Gb hasta 64 Tb.
 - Puede tener 15 replicas y el proceso es más rápido.
 - Failover en Aurora es instantáneo. Es HA nativo.
 - Aurora costa más que los RDS (20% más)
 Aurora HA y Read Scaling
 - 6 copias de los datos en 3 AZ:
   - 4 copias necesarias para escribir.
   - 3 copias de 6 necesita para leer.
   - Self healing with peer-to-peer replica
   - Storage striped accross 100s of volumes.
 - 1 Aurora toma la escrituras (master)
 - Failover automática en menos de 30 segundos.
 - Master + hasta 15 replicas de lectura.
 - Soportan Cross Region Replication.
 Aurora DB Cluster
 - Master es el único que escribe.
   Hay una Writer Endpoint apuntando a la master.
 - AutoScalling en la replicas de lectura.
   Reader Endpoint - Conection Load Balancing.
 Features de Aurora.
  - Automatic Failover
  - Backup and Recovery
  - Isolation and Security
  - Industry Compliance
  - Push-Button scaling
  - Automated patching with zero downtime
  - Advanced Monitoring
  - Routine maintenance
  - Backtrack: restore data at any point of time withour usign backups
 Aurora Security
  - Similar RDS
  - Encripción at Rest
  - Backup automaticos, snapshot y replicas son encriptadas.
  - Encripción on the flight SSL
  - Posibilidad de autenticar con IAM token
 Aurora Serverless
  - Autmated database instantiation and auto scaling base on actual usage.
  - Bueno para trabajos infrecuentes, intermittent o unpredictable.
  - No capacity planning needed.
  - Pay per second.
  - Proxy Fleet manejado por aurora.
  Sube y baja hasta 0 aurora.
 Global Aurora
  - Replicas de Aurora entre regiones
   - Para DR, simple de realizar.
  - Aurora Global Database
   - 1 Region primaria para read/write
   - Hasta 5 secundarias en read only, con lags menores al segundo.
   - Hasta 16 read replicas por región secundario.
   - Ayuda a decrece latency
   - RTO para promover hacia otra región es de menos de 1 minuto.
AWS ElastiCache Overview
 - ElastiCache is to get managed Redis or Memcached
 - Caches son base de datos en memoria con alta performance y baja latencia.
 - Ayuda a deducir la carga en la base de datos para lecturas intensivas.
 - Ayuda a que las aplicaciones sean Stateless
 - Write scaling usdin sharding
 - Read Scaling using Read Replicas
 - Multi AZ con Failover Capacity
 - AWS se ocupa del OS, patching, optimización, setup, configuración, monitoreo, failover recovery y backups,}
 Solution Architectura - DB Cache
  - App query primero a ElastiCache, si no está disponible, lo obtiene del RDS y lo guarda en el ElastiCache.
  - Cache hit alto, mejor.
  - Cache miss va a las agrega el ElastiCache.
  - Cache debe tener una estrategia de invalidación para que solo los datos más actuales son usados.
 Solution Architecure - User Session Store
  - La app graba la session en ElatiCache.
  - The users hits another instance of application.
  - La instancia devuelve los datos del usuario ya logueado.
 ElastiCache - Redis vs Memcached
  - Redis
    - Multi Az con auto failover.
    - Read replicas para escalar lecturas y ha
    - Durabilitiy data usando AOF presistence
    - Backup y restore features
  - Memcached
    - Mutli node para particionar los datos (sharding)
    - Non persistent
    - No backup
    - Multithreaded Architecture.
 ElastiCache - Cache security
  - All caches in ElastiCache:
    - Support SSL in flight encryption
    - Do not support IAM Authentication
    - IAM policies on ElastiCache solo son usada para la AWS API-level security
  - Redis Auth
    - Se setea un "passwrod/token" cuando se crea el cluter de Redis
    - En un nivel extra de seguridad (además del SG)
  - Memcached
    - Suporta SASL based autentication
 ElastiCache for Solution Architecture
  - Patrones para ElastiCache
     - Lazy Loading: Toda la data a leer es levantada en cache, está stale in cache.
     - Write through: Add or update data en cache cuando se escribe en la DB.
     - Session Store: Almacena temporalmente los datos de session en cache (usando TTL feature)
------------------------------------
###############################
------------------------------------

Route 53 - Managed DNS
A record: hostnama
AAAA record: hostname IPv6
CNAME: hostname to hostname
Alias: hostname a recurso de AWS

Maneja Public Domain y private domain.
Advanced Feature:
 Load Balancing, Health checks y routing policies
Se paga 0.50 por mes por zona hosteada.

high TTL - 24 hs. - Poco tráfico al DNS y outdated records
Low TTL - 60 seconds - Easy to change, more traffic to DNS, Record outdated less time

CNAME no sirve para root domain.
Alias apunta a una AWS Resource. Sirve para Root domain y non root domain. Gratis y tienen un chequeo de salud del servicio. Casi siempre alias porque es gratis.
Las IPs pueden tener diferentes Weight (pesos) Control el % de request

Routing Policies
 - Weighted
 - latency - Va del usuario a la región de AWS que está más cerca.

Health Checks
 - Si 3 fallan da error.
 - Chequea cada 30 segundos.
 - Fast Helt 10 segundos
 - 15 health checkers
 - Verifica HTTP, TCP y HTTP (no verifica SSL)
 Puede integrarse con CloudWatch

Failover Routing policy
 - Para un DRP

GeoLocation Routing policy
 - Es un ruteo que según el origen del tráfico es a que IP tiene que ir

Multivalue
 - Se pueden obtener hasta 8 healthy records for each Multivalue
 - Para rutear tráfico a multiples recursos.
 - NO subtituye ELB, pero permite un balanceo.
Route53 - es un domain registrar
 - Son cosas distintas DNS y registrar
-------------------
****************
-------------------
Session_id lo ponemos en un ElastiCache para tener las cosas del carrito.
ElastiCache es más seguro que la Cookie.
Grabamos datos de la persona en Amazon RDS.
Scaling Reads - RDS Master - Write y RDS Replica only for read (otra opción es ElastiCache y RDS sola se hace en la aplicación)
RDS - Mutli AZ lo tiene igual que ElasticCache.
Security Group solo ellos pueden acceder al ElasticCache o RDS

Aurora MySQL es más que RDS para un Wordpress
Multi AZ y Read Replicas.
EFS mejor para compartir imágenes.
ENI para conectar al EFS
EBS es más barato de EFS (File Share)
Para que las aplicaciones salgan rápido se crea una Golden AMI
AMI y User Data (user data para obtener datos de una base de datos para el momento del inicio del EC2 y la app)
RDS y EBS snapshot para poner los datos en otro lado.

ElasticBeanStalk is a developer centric view.
3 Tipos de arquitecturas
 - Single Instance - Developer
 - LB + ASG - Production o Pre-Produccion
 - ASG: Para applicaciones no web en Producción
3 componentes:
 - Application
 - Application Version
 - Enviroment name
Deploy app version to enviroment.
Rollback feature
Full Control Lifecycle enviroment
Support for many platforms:

------------------
**********
------------------
Amazon S3 el más importante Building
Infinitely scaling de almacenamiento
Muchos sitios web está como backbone.

En S3 se guardan objetos (archivos) en Buckets (directorios)
Cada Bucket tiene un nombre único a nivel global.
Se definen por región
Convención de nombre - sin mayusculas, son underscore, 3-63 caracteres, no una IP,tiene que empezar con lowercase letra o número
Objects
 - Files - tienen un key.
 - El key es el full path - s3://my-bucket/"my_file.txt" el key entre comillas 
 - El Key prefix + object name (my_file.txt el object name)
 - No existe el concepto de directorios
 - Max object size is 5TB
 - No se puede subir más de 5GB, hay que hacerlo por partes.
 - Metada - Key/value pairs - system or user metadata
 - Tags (unicode key/value pair hasta 10) - Para security o Lifecycle
 - Version ID (if versioning are enable)
S3 es una consola global, pero los buckets son por región.
Versioning S3
 - Primero hay que activarlo a nivel de Bucket
 - Por cada key overwrite increment version
 - Facil roolback y es una muy buena práctica.
 - Si se suspende el versionado, no borra las versiones anteriores.
 - Cuando hay versionado si borras lo marca como borrado, pero no lo borra, hay que listar version y ahí buscar el permanent delete.
Encripción S3
 - 4 métodos para encriptar objetos
   - SSE-S3 - Administrador por AWS
   - SSE-KMS: AWS Key management Service
   - SSE-C: Keys propios
   - Client Side Encryption
SSE-S3
 - Keys manejadas por Amazon S3
 - Server Side
 - AES-256 encryption type
 - Set Header "x-amz-server-side-encryption":"AES256"
SSE-KMS
 - Key Management Service manejas las Keys
 - Control de Quien usa cada key: user control + audit EC2Tutorial
 - Object encripted server side
 - header "x-amz-server-side-encryption":"aws:kms"
SSE-C (solo con AWS CLI)
 - Keys outside AWS
 - HTTPS para usar
 - Key tiene que venir en el HTTP headers.
Client Side Encryption
 - Client library lis Amazon S3 Encrypt Client
 - Client encriptar antes de subir
 - Client desencripta cuando lo baja.

Encripcion en transito (SSL/TLS)
S3 si es HTTPS está encriptado on the flight.
HTTPS by default.
HTTPS mandatory for SSE-C.

S3 Security
User based
 - IAM Policies - API Calls
Resource based
 - Bucket Policies - bucket wide rules form the S3 Console
 - Object Access Control List (ACL) - finer generation
 - Bucket Access Control List (ACL) - Less common

 IAM Principal pude acceder al S3 object si el IAM lo permite o si el resource policies.
 Si no hay explicitamente denegado.

 JSON based policies.
  - Resources: Buckets and object.
  - Actions: Allow or Deny
  - Principal: The account or user to apply the policy to
S3 bucket for policy para:
  - Permitir acceso publico
  - Forzar objetos para ser encriptados.
  - Permitir acceso a Cross Account.

Buckets setting para Block Public Access.
  - Block object for public access
    - New ACLs
    - Any ACLs
    - New public bucket or access point policies
  - Block for any public bucket or access point policies.
  - Prevent company data leak.
Others:
 - Netwroking - Supports VPC endpoints
 - Logging and Audit - S3 access store in other S3 bucket
 - API calls can be logge in AWS CloudTrail.
 - USer Sec: MFA delete or Pre-Signed URLs.

S3 website
 - Si tenemos un error 403 fijarse si está público para leer el bucket.
 - url: "bucketname".s3-website-"AWS Region".amazonaws.com

S3 CORS 
 - Origin is a scheme (protocol), host (domain) and port
 - CORS - Cross-Origin Resource sharing
 - Web Browser allow requests a otros origenes visitando el main origin.
 WebBrowser - Access-Control-Allow-Origin: ... and Methods.
 - Tenemos que habilitar CORS headers para especificar si vamos a tener un cross origin en el S3
 Habilitar en el CROSS Origin.

S3 - Consistency Models
 - Read after write consistency for PUTS of new objects.
  - cuando se escribe, se pude obtener. PUT 200 => GET 200
    Excepto que tratemos de ver el objeto antes que el objeto exista. Get 404 => Put 200 => Get 404.
 - Eventual Consistency for DELETES and PUTS of existings objects.
    Puede tarda en reflejar la actualización.
 No hay forma de solicitar strong consistency
 -----------------------------
 AWS CLI, SDK, IAM Roles.

 Nunca se ponen las credenciales en una instancia de EC2 - Se usan IAM Roles para el Client
 Solo puede tener un IAM Role cada EC2.

 Inline Policy - No puede poner en otro rol. No se recomienda.

Existe un AWS Policy Simulator - https://policysim.aws.amazon.com/
AWS Policy Generator - https://awspolicygen.s3.amazonaws.com/policygen.html

EC2 Instance metadata
- Permite a los EC2 ver quienes son
- http://169.254.169.254/latest/meta-data solo funciona internamente.
Podemos obtener el nombre del IAM Role, pero no nos trae la policy.
- Sirve mucho para automatizar.

Esperan que sepamos que cosas van por SDK y cuales no.

AWS SDK - es recomendable usar "default credential provider chain"
 - Se pone en /.aws/credentials
 - Instance profile
 - Enviroment Variables (AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY)

 Never ever guardadr credenciales en el código.
 Usar 100% IAM Roles con AWS Services.

 Exponencital Backoff
  - Falla por muchas llamadas continuas.
  - rate limited API.
  - Es exponencial por cada falla de llamada a la SDK. El doble que la anterior.
MFA-Delete S3
Se tiene que habilitar Version.
The Bucket owner (root account) can enable/disable MFA
MFA-Delete solo se puede hacer con la CLI.

S3 Access logs
Todos los accesos quedan
Nunca poner en el mismo bucket el log de lo que voy a monitorear.
HAce un loop y lo llena de datos.
Los logs se pueden analizar con Athena.
S3 Replication (CRR & SRR)
Replicación Asincrónica - 
Cross Region Replication (CRR)
Same Region Replication (SRR)
Buckets pueden estar en diferentes cuentas
Se tiene que dar los permisos adecuado en IAM a S3

CRR - Se usa por compliance, menor latencia para el acceso o entre cuentas
SRR - Se usa para log aggregation, live replication.

A partir de que se activa replica (nada de lo anterior)
En las operaciones de DELETE:
 - Si no tiene version ID, agraga una marca de borrado, no replica.
 - El borrado no se replica. 
No se pueden encadenar las replicas.

S3 pre-signed URLs

Can generate pre-signed URLs using SDK or CLI.
Por defecto es válido por 3600 segundos se cambia con --expires-in (tiempo en segundos)
Los usuarios con la pre-signed URL heredan los permisos de los usuarios que los crearon.

S3 Storage Classes

Saber cual usar para que
- Amazon S3 Standard - General Purpose
- Amazon S3 Standard-Infrequent Access (IA)
- Amazon S3 One Zone-Infrequent Access
- Intelligent Tiering
- Glacier - Archive
- Glacier Deep Archive

Reduced Redundancy Storage (deprecado)

- Amazon S3 Standard - General Purpose
  High durability (99.9999999%) de los ojectos a través de múltiple AZ
  99.99% de disponibilidad en un año.

  Usado generalmente para: Big Data analytics, mobile & gaming, content distribution.

- Standard-Infrequent Access (IA)
  Son datos que son poco accedidos, pero requieren rápidos accesos cuando necesita.
  High durability (99.9999999%) de los ojectos a través de múltiple AZ
  99.99% de disponibilidad en un año.
  Es más barato que S3 Standard.

  Usado para: Data Store para disaster recovery, backups, etc.

- One Zone-Infrequent Access
  Igual que IA pero en una sola AZ.
  99.5% de disponibilidad
  Support SSL
  Más barato que el IA.

  Usado para: copia secundaria de backup, o datos que puedan ser recreados.

- Intelligent Tiering
  - Tiene la misma baja latencia que S3 Standard
  - un costo un poco mayot por monitoreo y autotiering
  - Mueve los objetos entre tiers basado en su acceso.
  - Durability 99.999999999 y multi AZ
  - 99.9 % de disponibilidad

- Amazon Glacier
 - Cold Archive para backup y archive.
 - Retenida por 10 años el dato 
 - Alternativo a Tape storage.
 - Durability 99.999999999
 - Costo por mes (0.004/GB) + retrieving cost.
 - Cada item en Glacier se llama Archive y puede ser de hasta 40 TB.
 - Archive se almacenan en Vault.

Opciones de Glacier para traer el dato (retrivel):
  - Expedited (1 a 5 minutos)
  - Standard (3 a 5 horas)
  - Bulk (5 a 12 horas)
  - Mínimo 90 días.

Amazon Glacier DeepArchive - Para long term storage:
  - Standard (12 horas)
  - Bulk (48 horas)
  - Mínimo duración en el almacenamiento 180 días

El Storage Class se pone cuando se sube un archivo.

Las Local Zones no tiene AZ

S3 - Moving between storage classes.

Se puede transicionar objetos en storage classes.
El movimiento de los objetos en forma automatiza se puede realizar con el lifecycle configuration.

S3 Lifecycle rules
 - Trasition actions:
    - Move objects to Standard IA 60 days después de su creación.
    - Move to Glacier para achiving
 - Expiration actions:
    - Access log files can be set to delete after 365
    - Can be used to delete old version
    - Can be used to dele incomplete multi-part uploads.
 - Las reglas pueden ser creada para ciertos prefijos o por tags.
 
 S3 - Baseline performance

 Amazon S3 escala automática entre 100-200 ms
 Podes tener 3500 (PUT/COPY/DELETE/POST) y 5500 GET/HEAD request per second per prefix in a bucket
 Si esparcimos los read a través de los prefijos podemos tener 22000 request por segundo.
 KMS Limitaciones
  - SSE-KMS impactado por el KMS limit.
  - KMS Quota per second (5500, 1000, 30000 req/s based on region)
  - No se puede aumentar la Quota de Request en KMS
Como obtimizar
 - Multipar upload para acrhivos mayores a 100 MB.
   - Paralelizar la subida.
 - S3 Transfer Acceleration
   - Incrementa la velocidad transfiriendo los archivos a una AWS Edge que reenvia al bucket de destino.
   - Compatible con multipart upload.
S3 bytes-Range Fetches
 - Paraleliza los Gets para un rango especifico de bytes
 - Más resilente en caso de falla.

 Se puede usar para mejorar el download - Paraleliza el download.
 Se puede usar para bajar una parte del archivo( el head del file) ejemplo los 16 bits iniciales.

S3 Select & Glacier Select
 -  devuelve menos datos usando SQL para un filtrado del lado del servidor.
 - Podés filtrar por fila o columnas
 - Menos transferencia en la red y menos costo de CPU del lado del cliente.
   400% más rapido y 80% más barato.

S3 Event Notifications.
 - Se pueden crear reglas y generar cosas.
 - SNS - Para enviar por SMS o email
 - SQS - Para generar una cola
 - Lambda Function - 
 Se puedene crear S3 events as desired.
 Si queremos que funcionen todas las notificaciones hay que habilitar el versionado del bucket.

AWS Athena
Serverless service para hacer analitycs directamente sobre S3 Files
SQL language
JDBC or ODBC driver / Se cobra por query y por cantidad de datos escaneados.
Backend Presto.
Como analizamos los datos directamente en S3 -> use Athena
VPC Flow Logs, ELB Logs, CloudTrail trails, etc.

S3 Object Lock & Glacier Vault
 - S3 Object Lock
   - Adopt a WORM Model (Write One Read Many)
   - Block an object version deletion for a specific amount of time
 - Glacier Vault Lock
   - Adopt a WORM Model
   - Lock the policy for future edits (no pude ser modificado)
   - Sirve mucho para Para Compliance y data retention

AWS CloudFront
 - CDN
 - Improves read performance, contenido cacheado.
 - 216 puntos de presencia globales.
 - DDoS protection, integrado con Shield, AWS Web App Firewall.
 - Can expose external HTTPS and talk internal HTTPs backends.

Origenes para usar CloudFront
 - S3 Buckets
   - Distribución files y cache en el Edge
   - Mejora la seguridad con CloudFront Origin Access Identity
   - Se puede usar para subir archivos a S3
 - Custom Origin (HTTP)
   - Application Load Balancer
   - EC2 instance
   - S3 website
   - Any HTTP.
 - S3 with Clodufront - Edge Location - OAI+S3 bucket policy y manda a un edge location.
 - ALB or EC2 - Hay que permitir al EC2 todas la IPs publicas del Edge Location para obtener los files.
   ALB - Allow Public IP of Edge Locations.
 - CloudFront - Geo Restriction.
   - Whitelist
   - Blacklist
 - CloudFront vs S3 Cross Region
   - CloudFront - Global Edge Network, File Cached, Great for static content.
   - S3 Cross Region Replication - Se debe poner en cada región que se quiere replicar, Se actualiza casi en tiempo real, Solo lectura. Para Dynamic content.

 - CloudFront Signed URL/Signed Cookies
  - Para distribuir contenido premium a usuarios en el mundo.
  - Se puede usar CloudFront Signed URL/Cookie. Se adjunta una policy con:
    - URL Expiration
    - IP Ranges to access the data from
    - Trusted Signers.
  - Que tanto tiempo hacemos la URL válida:
    - Shared Content (movies, music): hacerlo corto (unos pocos minutos)
    - Private Content (privado al usuario): last for years
  - Signed URL = access to individual file.
  - Signed Cookies = access to many files and reusable.

La aplicación autentica y con el AWS SDK genera la URL firmada y se la retorna al cliente.

CloudFront Signed URL vs S3 Pre-Signed URL
CloudFront
 - Permite el acceso a un path, no importa el origen.
 - Account wide key-pair, only the root can manage it
 - Se puede filtrar por IP, Path, dia, expiracion
 - Se puede dejar features cacheados.
S3 
 - Issue a request as the person who pre-signed the URL.
 - Uses the IAM key of the signing IAM principal.
 - Limited Lifetime

AWS Global Accelerator.
 - Unicast IP vs Anycast IP
   - AnyCast IP: all servers hold the same IP address and the client is routed to the nearest one.
 - Usa AnyCast IP AWS Global Accelerator.
  - Leverage the AWS Internal network to route to your application.
  - 2 AnyCast IP are created for your application.
  - The AnyCast IP send traffic directly to Edge Locations.
  - The Edge locations send the traffic to your application.
 - Trabaja con ElastiC IP, EC2, ALB, NLB, public or private.
 - Performance Consistente.
    - Busca en forma inteligente la región más adecuada con menor latencia.
    - Sin problemas de cache del cliente porque es la misma IP.
    - Interno en la red de AWS
 - Health Checks
   - Realiza checks sobre la aplicación.
   - Hace que la aplicación global (failover en menos de 1 minuto si es unheltly)
   - Muy bueno para Disaster Recovery.
 - Seguridad
   - 2 IP externas para tener en el whitelist.
   - DDoS protection por AWS Shield

Diferencias en AWS Global Accelerator vs CloudFront.
 - Ambos usan edge location.
 - Ambos integran AWS Shield for DDoS

 CloudFront
  - Mejora la performance por ambos tipos de contenidos (como imágnes y videos)
  - Contenido Dinámico
  - Contenido is served at the edge.
 Global Accelerator
  - Mejora la performance en una gran cantidad de aplicaciones sobre TCP o UDP
  - Proxying packets en el Edge hasta la aplicación corriendo en más de una región de AWS.
  - Good for non-http use case, como gaming (UDP), IoT o IP Voice.
  - Good for HTTP que requiere IP estática, fast regional failover.

Snowball
 - Physical data transport solution that helps mvoign TB or PB of data ori out of AWS.
 - Secure, Tamper resistan, uses KMS 256 bit encription.
 - Tracking using SNS and text messages.
 - Pay per data transfer job.
 - Se usa para grande cantidades de datos a migrar a la nube, disaster recovery
Proceso:
 1. Se pide el Snowball
 2. Instalar un cliente de Snowball a los servidores.
 3. Connect snowball a los servidores y copiar con el cliente.
 4. Enviar de vuelta a Amazon.
 5. Los datos son cargados en un S3 bucket.
 6. Snowball se borra
 7. El tracking se hace usando SNS, Text message y la consola de AWS.
Si es a 10Gbit/s si lo hacés por internet.

Snowball Edge
 - Agrega capacidad de computo al dispositibo.
 - 100 TB de capacidad con - Storage Optimization (24 vCPU) y Computo optimizado 52vCPU-
 - Soporta EC2 AMI customizada para hacer en proceso on the go.
 - Soporta funciones de Lambda.
 - Muy útil si queremos pre-procesar los datos mientras se mueven.
 - data migration, IO Capture, Machine Learning,

AWS Snowmobile
 - Transfiere exabytes de datos (1 EB = 1000 PB = 1000000 TBs)
 - Cada Snowmobile tiene 100 PB de capacidad.
 - Mejor que el Snowball si transferimos más de 10 PB de información.

Snowball into Glacier
 - No se pued importar directo de Snowball a Glacier.
 - Primero S3 y luego S3 lifecycle policy.

Storage Gateway
Hybrid Cloud for Storage
 - S3 es una tecnología propietaria.
AWS Storage Cloud Native Optimization.
Block - EBS, EC2
FILE - Amazon EFS
OBJECT - S3 Glacier

Se usa para disaster recovery, backup & restore y tiered storage.
3 tipos de Storage Gateway (hay que saber la diferencia entre los 3)
 - File Gateway 
 - Volume Gateway
 - Tape Gateway 

File Gateway
 - Configured S3 buckets accesible por NFS o SMB.
 - Soporta S3 Standard, S3 IA, S3 One Zone IA.
 - Acceso por IAM por cada file Gateway
 - Los datos recién usados están cacheado en el file Gateway.
 - Puede ser montado en varios servidores.

Volume Gateway
 - Block stroge usando iSCSI by S3
 - Backupeados por EBS Snapshots para restaurar on premise volumes.
 - Cached Volumes - Baja latencia para acceder a los datos más recientes.
 - Stored volumes - Un dataset entero On-Premise, scheduleados lo backups a S3.

Tape Gateway
 - Son VTLs backupeadas en Amazon S3 y Glacier.
 - Se backupea los datos usando procesos existentes de tape.
 - Trabaja con los backups lideres.

Si dice File / NFS
Si es Volume / iSCSI - Blocks.
Si es Backup - Tape Gateway

Storage Gateway Hardware appliance se puede comprar.
Sirve para backups diarios de NFS en pequeños datacenters.

Amazon FSx for Winwdows (File Server)
FSx for Widnows es un share de windows.
Soporta SMB y NTFS.
Integrado con AD, ACL, user Quotas
Build on SSD, escalable hasta 10s of GB/s, millones de IOPs
Accesible desde On-Premise
Se puede configurar en Multiples AZ para alta disponibilidad
Los datos son backupeados en forma diaria en S3.

Amazon FSx for Lustre
 - Lustre es un tipo de file system distribuido, para computación de alta capacidad.
 - El nombre Lustre, viene de Linux y Cluster.
 - Machine Learning, HPC.
 - Video processing, electronic design
 - sub-ms latencia
 - Seamless integration con s3
    - Puede leer S3 como un file system a través de FSx.
    - Write en S3
 - Puede usarse en OnPremise.

Storage Comparison
S3: Object Storage.
Glacier: Object Archival.
EFS: NFS for Linux, POSIX
FSx for Windows: SMB de Windows.
FSx for Lustre: HPC para Linux  
EBS Volumes: Almacenieminto de red para 1 EC2 instance. En un AZ.
Instance Storage: Almacenamiento físico a mi EC2 instance (high IOPS)
Storage Gateway: File Gateway, Volume Gateway, Tape Gateway
Snowball/Snowmobile: move large amoun of data.
Database: para Workloads especificos. 

-------------------------
-------------------------
AWS Integration & Messaging.

- 2 patrones en las comunicaciones de las aplicaciones:
  - comunicacion sincronica - App to app
  - Comunicación Asincrónica/Event Based - App to queue to app.

El sincronismo en la aplicaciones puede ser problemático si hay picos de tráfico.
En estos casos es mejor desacoplar (decouple) las aplicaciones con:
  - SQS - Queue Model
  - SNS - pub/sub Model
  - Kinesis - realtime streaming model (Big data)

Amazon SQS

Poducer genera los mensajes hacia la SQS Queue y los consumidores bajan los mensajes y los procesa y borra de la Queue.
Es un buffer entre el Producer y Consumer.
Standard Queue
 - Tiene 10 años
 - Fully Managed Service y se usa para decouple applications.
 - Atributos
   - unlimited Thoughput, unlimited messages in the queue.
   - Por defecto, el mensaje está por 4 días con un máximo de 14 días.
   - Baja latencia (menos de 10 ms para recibir o publicar)
   - Limite máximo del mensaje 256 KB por mensaje.
   - Se puede tener mensajes duplicados.
   - Puede tener mensajes desordenados (tiene un best effort ordering)

SQS - Producing messages
 - Produced to SQS usando el SDK (SendMessage API)
 - El mensaje permanece hasta que el consumer lo borra.

 Ejemplo: Enviar y una orden para ser procesado
  - Order id
  - Customer id
  - Cualquier atributo que uno quiera. 

SQS - Consuming messages
 - Consumers (running on EC2, servers on premise o AWS Lambda)
 - Poll SQS for messages (recibe de a 10 mensajes por vez)
 - Procesa el mensaje (Ej: )
 - Delete the message usando la DeleteMessage API.

SQS - Multiple EC2 instance Consumers.
 - Cada Consumidor recibe y procesa los mensajes en paralelo.
 - Borra una vez procesado.
 - At least one delivery.
 - Podemos scalar horizontalmente si necesitamos más.

SQS with Auto Scaling Group (ASG)
 - La métrica de CloudWatch - Queue Length (ApproximateNumbreofMessages)
   Se genera un alarma y scala el ASG.

SQS to decouple entre aplicaciones.

 - Aplicaciones que procesa videos divdida en 2.

Amazon SQS - Security
 - Encripción
   - In-fligth - HTTPs API
   - at-rest usando KMS
   - Clien-side encription
 - Access Controls: IAM policies to regulate access to SQS API.
 - SQS Access Policies (similar to S3 bucket policies)
  - Cross acount access
  - Permitir a otros servicios escribie en la SQS Queue

SQS - Message Visibility Timeout
 - Cuando un mesaje es tomado por un consumidor, se vuelve invisible para los otros consumidores.
 - El Visibility timeout es 30 segundos por defecto.
 - Es decir tiene 30 segundos para ser procesado.
 Ojo que se puede procesar 2 veces.
 - Si necesita más tiempo para procesar, utiliza la API call ChangeMessageVisibility para obtener más tiempo.

SQS - Dead Letter Queue
 - Cuando un consumidor falla, el mensaje vuelve.
 - Si pasa muy seguido, debe haber algo raro en el mensaje.
 - Se puede poner un Loop y poner un máximo.
 - Después de superar el MaximumReceives threshold excede. El mesnaje va a una Dead Letter Queue (DLQ)
 - Es para debugging ... la DLQ 
 - DLQ expira en 14 días.

SQS - Delay Queue
 - Delay message hasta 15 minutos 
 - Default 0
 - Se puede hacer override the default on send using the DelaySeconds parameter.

SQS - Fifo Queue
 - Los mensajes son ordenados, los primero que entran, son los primero que salen.
 First in, First Out.
 - Limitado para 300 msg/s sin batching y 3000 msg/s con batch,
 - Remove duplicates.
 - Mensajes procesados en orden.

SQS with Auto Scaling Group
 - La métrica es - CloudWatch Custom Metric / Queue Length - Number of instances.
   Generamos la alarma Y esa alarma va al AutoScalling Group.
 - Cuando ir Up or down.
 Hay que crear una custom metric.
 
AMAZON SNS

Mandar un mensaje y tener muchos recievers.
Pub/Sub (Publish - Subscribe)
 - El "event producer" manda 1 solo mensaje a un SNS topic
 - Y manda a los "event recievers" (subscription) que escuchar el SNS topic notification.
 - Cada subscriber 
 - Puede tener 10.000.000 subscriptions per topic.
 - 100.000 topics limit
 - Los subscribers puede ser:
    - SQS
    - HTTP/HTTPS
    - Lambda
    - Emails
    - SMS messages
    - Mobile Notifications
 SNS integrado con muchos Servicios de AWS
  - CloudWatch
  - Auto Scaling Groups
  - Amazon S3 (buckets events)
  - CloudFormation
  - Etc.
Topic Publish (using the SDK)
 - Create topic
 - Create a subscription
 - Publish to the topic
Direct Publish (para mobile apps)
 - Create a platform application
 - Create a platform endpoint
 - Publish to the platform endpoint
 - Works with Google GCM, Apple APNS, Amazon ADM...
SNS - security
 - Encripción
   - In-fligth - HTTPs API
   - at-rest usando KMS
   - Clien-side encription
 - Access Controls: IAM policies to regulate access to SQS API.
 - SNS Access Policies (similar to S3 bucket policies)
  - Cross acount access
  - Permitir a otros servicios escribie en la SNS Topic

SNS + SQS:Fan Out
 - Push once to SNS, receive in all SQS queues that are subscribers.
 - Full decoupled, no data loss.
 - SQS allows for: data persistence, delayin processing and work retries.
 - Agregar más SQS en el tiempo
 - Estar seguro que los SQS queue access policy permite a los SNS escribir.
 LIMItacion - SNS no pueden enviar mensajes a una queue FIFO.
 - Aplicaciones: S3 events to multiple queues.
   - Combinaciones de tipo de evento y prefix se puede tener un solo event rule.
   - Si queremos mandar el mismo S3 event a varios SQS, usamos Fan Out

AWS Kinesis
 - Kinesis is a managed alternative to Apache Kafka.
 - Great para logs, metrics, IoT, clickstrea, Real time Big data.
 - Great para streaming processing framework (Spark, NiFi, etc.)
 - Los datos son replicados automáticamente en 3 AZ.
 3 Productos

 - Kinesis Streams:low latency streaming ingest at Scale
 - Kinesis analytics: perform real-time analytics on streams using SQL.
 - Kinesis Firehose: load streams into S3, Redshift, ElasticSearch ...

Kinesis Streams
 - Streams están divididos en Shards/Particiones.
   Se agrandan los shards para tener más paralelismo.
 - Data retention is 1 day by default, can go up to 7 days.
 - Ability to reprocess/reply data
 - Multiple app consume same stream.
 - Procesamiento en tiempo real
 - Una vez que los datos están insertados en Kinesis, no se pueden borrar (no es un db - inmatubilidad)
Kinesis Stream Shards
 - 1 Stream está compuesto por muchos shards 
 - 1 MB/s o 1000 mensajes para escribir por shard
 - 2 MB/s para leer por shard
 - Se paga por cantidad de shard aprovisionados.
 - Batching available or per messsage calls.
 - La cantidad de shards pueden evolucionar a través del tiempo (reshard/merge)
 - Los registros están ordenados por shard
AWS Kinesis API - Put records
 - PutRecord API + Partition key that gets hashed.
   Key is hashed to determine shard id.
 - Same key to same partition
 - Message sent get a "sequence number"
 - Hay que elegir partition key que estén bien distribuidas.
    - user_id if many users (muy común)
    - Not country_id 90% of the users are in one country
 - Use Batching with PutRecords to reduce costs and increase throughput
 - ProvisionedThroughputExceeded if we go over the limits.
 - Can use CLI, AWS SDK, or producer libraries from various frameworks.
AWS Kinesis API - Exceptions
 - ProvisionedThroughputExceeded Exceptions
   - Cuando mandamos más datos que los soportados.
   - Verifiquemos que no tengamos un hot shard (tenemos mal el partition key - poco distrubuido)
 - Solution:
   - Retries with Backoff
   - Incrementar los Shards
   - Ver si el partition key está bien.
AWS Kinesis API - Consumers
 - Se puede usar un consumer normal (CLI, SDK, etc)
 - Se puede usar el Kinesis Client Library (Java, Node, python, ruby,.net)
   - KCL usa DynamoDB to checkpoint offsets.
   - KCL usa DynamoDB to track other workers y compartir el trabajo a través de los shards.
Kinesis Security
 - Control de acceso y autorización usando IAM policies.
 - Encripción on the flight usando HTTPS endpoints.
 - Encripción at rest usando KMS.
 - Posibilidad de encriptar/desencriptar datos en el lado del cliente (harder)
 - VPC Endpoints disponibles para Kinesis para acceder en un VPC.

AWS Kinesis Data Firehose
 - Servicio totalmente adminsitrado, automatizado el escalamiento, Serverless
 - Carga datos en Redshift / Amazon S3 / ElasticSearch / Splunk
 - Near Real Time
   - 60 segundos de latencia
   - o 32 MB mínimo de datos
 - Soportas muchos formatos de datos, conversiones, transformaciones, compresiones.
 - Se paga por la cantidad de datos que va a través de Firehose.
Kinesis Data Firehose Diagram
Le pueden manda SDK (KPL), Kinesis Agent, Kinesis Data Streams, CloudWatch Logs y Eventos.
 - Se puede usar Lambda para transformar los datos 
 - Se manda a Amazon S3, Redshift, Elastic, Splunk
Kinesis Data Stream vs Firehose
 - Streams
    - Para cuando creamos nuestro código customizado (producer/consumer)
    - Real time (200ms)
    - Se de Administrar el escalamiento (splittin)
    - Data Store de 1 a 7 días, replay capability, multi consumers.
 - Firehose
    - Totalmente adminsitrado, envía a S3, Splunk, Redshift, ElasticSearch
    - Serverless data transformation con Lambda.
    - Near real time 
    - Escalamiento automático
    - No se almacena datos

Kinesis Data Analytics.
 - Se hacen analitica en tiempo real sobre los Kinesis Streams usando SQL.
 - Es autoescalable, Adminsitrado y Continuous en tiempo real.
 - Se paga por el consumo.
 - Se pueden crear streams out de los queries en tiempo real.

Orden de los datos en Kinesis 
 - Una vez asignado con el hash del partition key va siempre al mismo shard. No balancea completamente entre shards.
Orden de los datos en SQS
 - SQS Strandard, sin orden.
 - SQS Fifo, Si no ponemos Group ID, los mensajes los mensajes son ordenados como son enviados, con 1 solo consumer.
 - Queremos escalar la cantidad de consumidores pero queremos agruparlos los que están relacionados.
   Entonces se usa el Group ID similar a Partition Key de Kinesis.
   Consumidores se agranda.
Kinesis vs SQS ordering
 - Si son 100 camiones, 5 kinesis shard, 1 SQS FIFO
   - Kinesis Data Streams:
      - En promedio vamos a tener 20 camiones por shard.
      - Los datos ordenados en cada shard
      - La cantidad máxima de consumidores en paralelo es 5.
      - Se puede recibir hasta 5Mb/s de datos.
   - SQS FIFO
      - Solo tenés un SQS FIFO
      - 100 Group ID y se pueden tener hasta 100 consumidores.
      - tenes hasta 300 mensajes por segundo (o 3000 si se usa batching)
  SQS vs SNS vs Kinesis
   - SQS 
      - Consumidores "pull data"
      - Los datos son borrados una vez consumidos.
      - Se pueden tener tantos consumidores como se quiera
      - No es necesario aporvisionar throughput
      - No tiene un orden garantizado (excepto FIFO)
      - Delay individual por mensaje.
   - SNS
      - Envia datos a muchos subscribers.
      - hasta 10.000.000 de subscriptores.
      - El dato no es persistente.
      - pub/sub
      - hasta 100.000 topicos.
      - No es necesario aporvisionar throughput
      - Integra con SQS para fan-out architecture.
   - Kinesis
      - Consumidores "pull data"
      - Consumidores los que quieras
      - Posibilidad de reply data
      - Para real time big data, analytics y ETLs
      - Ordenados a nivel de Shards.
      - El dato expira en X días
      - Debe provisionarse el throughput
Amazon MQ
 - SQS, SNS son CloudNative
 - Aplicaciones tradicionales usan protocolos abiertos: MQTT, AMQSP,STOMP,Openwire,WSS.
 - Amazon MQ = managed Apache ActiveMQ
 - Amazon MQ no escala tanto como SQS/SNS
 - Corre en una máquina dedicada, puede están en HA.
 - Amazon MQ tieen ambos, queue feature (SQS) adn topic features(SNS)

Serverless
 - Inicialmente Serverless == FaaS (Function as a Service)
 - Serverless no quiere decir que no hay servidores, sino que no son administrados/provisionnados por nosotros.
Serveless en AWS
 - AWS Lambda
 - DynamoDB
 - AWS Cognito
 - AWS API Gateway
 - Amazon S3
 - AWS SNS & SQS
 - AWS Kinesis Data Firehose
 - Aurora Serverless
 - Step functions
 - Fargate

AWS Lambda
 - Virtual functions.
 - Limitado por el tiempo - pequeñas ejecuciones.
 - Corre on-demand
 - Scaling is automated.
Beneficios de AWS Lambda
 - Precio sencillo
    - Se paga por request y tiempo de computo.
    - Free Tier 1000000 de Request y 400000 GBs de computo.
 - Integrado con varios servicios de AWS.
 - Integrado con varios lenguajes de programación
 - Facil de monitorear con AWS CloudWatch
 - Facil de obtener más recursos por función (hasta 3 GB de RAM por función)
 - Si incrementamos RAM, también CPU.

AWS Lambda language support
 - Node.js
 - python
 - Java (Java 8 comp)
 - C#, Golang, Powershell, Ruby, Custom runtime API.
 
 - Docker no es soportado por Lambda

AWS Lambda integration.
 API Gateway, Kinesis, DynamoDB, S3, CloudFront, CloudWatch Events, Logs, SNS, SQS, Cognito.

ClodWathEvents -

https://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/begin

Lambda Limits per Region
 - Execution:
    - Memory Allocation: 128 Mb - 3008 MB (64 increment)
    - Maximum execution time: 900 seg. (15 minutos)
    - Enviroment Variables: 4 KB
    - Disk capacity in the "function container" (in /tmp): 512 MB
    - Concurrency execution: 1000 (puede incrementarse)
 - Deployment:
    - Lambda function Deployment size (Compress .zip): 50 MB
    - Size of uncompress Deployment (code + dependecies): 250 MB
    - Can use the /tmp to load other files for starup
    - Size of enviroment variables: 4KB
Lambda@Edge
 - Deploy Lambda functions alongside your CloudFront CDN.
   - Build more response applications.
 - Se puede usar lambda para cambiar los siguientes requests y responds en CloudFront
   - After CloudFront receive a request from a viewer (Viewer request)
   - Before CloudFront forwards the request to the origin (origin request)
   - After CloudFront receives the response from the origin (origin response)
   - Before CloudFront forward the response to the viewer (viewer response)
 - Use Cases:
   - Website security and privacy
   - Dynamic web app at the Edge
   - Session
   - Intelligently route across origins and data centers.
   - Bot Mitigation at the edge
   - Real-time image transformation
   - A/B Testing
   - User Authentication and Authorization
   - USer Priorization
   - User Tracking and analytics.

DynamoDB
 - Fully Managed, Hihly available con replicación en 3 AZ.
 - NoSQL Database - not a relational database
 - Scale to massive workloads, distributed database.
 - Milliones de Request
 - Integrado con IAM for security, Authorization and administration.
 - Enable event driven programming with DynamoDB
 - Low cost and auto AutoScalling

DynamoDB - Basics
 - DynamoDB is made of tables.
 - Each table has a primary key
 - Each table can have a infinite number of items (=rows)
 - Each item has attributes 
 - Maximum size of a itme is 400 KB
 - Data type supported are:
   - Scalar Types: String, Number, Binay, Boolean, Null
   - DocumentTyoos: List, map
   - Set Types: String Set, Number Set, Binary Set.
 DynamoDB - Provisioned Throughput
  - Table must have provisioned read and write capacity Units
  - Read Capacity Units (RCU): throughput per read (0,00013 por RCU)
    - 1 RCU = 1 strongly consistent read of 4 KB per seconds.
    - 1 RCU = 2 eventually consistent read of 4 KB per seconds.
  - Write Capacity Units (WCU): throughput per write (0,00065 por WCU)
    - 1 WCU = 1 write of 1 KB per second.
  - Option to setup auto-scalling of throughput to meet demand.
  - Throughput can be exceeded temporarly using "burst credits"
  - if burst credit ara empty, you'll get a "ProvisionedThroughputException".
  - It's the advised to do an exponential back-off retry.
DynamoDB - DAX
  - DAX = DynamoDB Accelerator
  - Seamless cache for DynamoDB, no application re-write
  - Writes go through DAX to DynamoDB
  - Micro second latency for cached read & queries.
  - Solves the Hot Key problem
  - 5 minutes TTL for cache by default.
  - Hasta 10 nodos en un cluster.
  - Multi Az (3 nodos mínimo recomendado para producción)
  - Seguro (Encryption at rest with KMS, VPC, IAM, CloudTrail)
DynamoDB Streams
  - Changes in DynamoDB can end up in a DynamoDB Stream.
  - This stream can be read by AWS Lambda, and we can then do:
      - React to chages in real time
      - Analytics
      - Create derivative tables / views
      - Insert into ElasticSearch
  - Could implement cross region replication usin streams.
  - Stream has 24 hours of data retention.
DynamoDB - New Features
  - Transactions (New from Nov 2018)
    - All or nothing type of operations.
    - Coordinate insert, update & delete multiple talbes.
    - Include up to 10 unique items or 4 MB de datos.
  - On Demand 
    - No capacity planning need (WCU/RCU)
    - 2.5x more expensive.
    - With spikes are un-predictable o aplicaciones con muy bajo throughput
DynamoDB - Security & Other Features.
 - Security
    - VPC Endpoints available to access DynamoDB
    - Access fully controlled by IAM
    - Encryption at rest using KMS /in transit SSL/TLS
 - Backup y Restore 
    - Point in time restore like RDS
    - No performance impact.
 - Amazon DMS can be use to migrate to DynamoDB (from Mongo, Oracle, MySQl, S3, etc)
 - You can launch a local DynamoDB on your computer for development purpose.
 - Global tables (cross Regions)
    - Multi region, fully replicated, high performance
    - Active Active replication, many regions.
    - Must Enable DynamoDB Streams
    - Useful for low latency, DR purpose.
 - Capacity planning
    - Planned Capacity
    - On-Demand capacity: get unlimited WCU & RCU, more expensive.
-------
AWS API Gateway
 - AWS Lambda + API Gateway
 - Support for the WebSocket protocol
 - Handle API versioning
 - Handle different evnironments (Dev,Test,Prod)
 - Handle Security (Authentication and Authorization)
 - Create API Keys, handle request throttling
 - Swagger / Open API import to quickly define APIs.
 - Transform and validate requests and responses
 - Generate SDK and API specifications
 - Cache API responses

API Gateway - Integration High Level
 - Lambda Function
   - Invoke Lambda functions
   - Easy way to expose REST API backend by AWS Lambda
 - HTTP
   - Expose HTTP endpoints in the backend
   - Add rate limiting, caching, user Authentication, API Keys, etc.
 - AWS Service
   - Expose any AWS API through the API Gateway.
   - Add Authentication, deploy pulbicly, rate control
API Gateway - Endpoint Types (3 forma de deploy)
 - Edge-Optimized (default): For global clients.
   - Request are routed a través del Cloudfront Edge Locations.
   - The API Gateway still lives in only one region.
 - Regional
   - Para clientes en la misma región.
   - Could manually combine with CloudFront (más control del caching y distribution)
 - Private
   - Can onlu be accessed from your VPC using a VPC endpoint 
   - Use resource policy to define access.
API Gateway - Security
IAM Permissions
 - Create an IAM policy Authorization and attach to User/role
 - API Gateway verifies IAM permission passed by the calling application
 - Good to provide access with your own infra.
 - Leverages "Sig v4" capacity where IAM credentcial are in headers.

Lambda Authorizer (formely Custom Authorizers)
 - Uses AWS Lambda to validate the token in header being passed.
 - Option to cache result of Authentication
 - Helps to use OAuth/SAML/3er party type of Authentication
 - Lambda must return an IAM policy for the user.

Cognito User pools
 - Cognito fully manages user lifecycle.
 - API Gateway verifies Identity Automatically from AWS Cognito
 - No custom implementation required
 - Cognito only helps with Authentication, not Authorization.

API Gateway - Security - Summary
 - IAM: 
    - Genial para usarios y roles que ya están con las AWS account.
    - Maneja Authentication y Authorization
    - Leverages Sig v4
 - Custom Authorizer:
    - Genial para 3rd party token.
    - Muy flexible con respecto a IAM policy
    - Maneja Authentication y Authorization
    - Se paga por Lambda invocation.
 - Cognito User Pool;
    - Manejar tu propio user pool.
    - No hay necesidad de escribir custom code.
    - Se debe implementar Authorization en el backend.

AWS Cognito
 - Cognito User Pools:
    - Sign in functionality for app users
    - integrate with API Gateway
 - Cognito Identity Pools (Federated Identity)
    - Provide AWS Credentials to users para acceder a los AWS Resouces.
    - Integrate with Cognito User Pool as an Identity provider.
 - Cognito Sync
    - Sunc data form device to Cognito.
    - May be deprecated adn replaced with app Sync
AWS Cognito User Pool (CUP)
 - Create a serverless database o users for your mobile apps
 - Simple login: Username / password
 - Posibilidad de verificar mail, phone number, y agregar MFA
 - Can enable Federated Identities (Facebook, Google, SAML, ..)
 - Send back a JSON web Tokens
 - Can be integrated with API Gateway

AWS Cognito -Federated Identity Pools
 - Login con una federaed Identity provaider or anonymous
 - Get temporary AWS credentials back from Federated Identity Pool.
 - Thes credentials com with a pre-defined IAM policy statin their premissions.
   - Ideal para acceso temporario.
AWS Cognito Sync - Deprecated - use AWS AppSync.

AWS SAM - Serverless Application Model
- Framework de desarrollo y deploy de aplicacione serverless.
- Todas las configuraciones en YAML.
- SAM puede usar CodeDeploy para deployar Lambda functions.
- SAM puede correr lambda, DynamoDB, api Gateway locally

########################################
Bases de Datos en AWS
########################################
Preguntas para elegir una base de datos:
 - Muchas Lecturas, Mucha escritura, o balanceado? Throughput necesario? Cambia el throughput, es necesario escalo o fluctua en el día?
 - Cuando son los datos a guardar y por cuanto tiempo? Va a crecer? Tamaño de objeto promedio? Como son accedidos?
 - Data Durabilitiy? Source of truth for the data?
 - Latencia requerida? Usuarios concurrentes?
 - Modelo de Datos? Como se va queriar el dato? Join? Structurado? Semi-estructurado?
 - Strong schema? Más flexible? Repoting? Search? RDMS, NoSQl?
 - Costo de licencia? Switch to Cloud native DB such as Aurora?
-----------------------
Database Types
 - RDBMS (=SQL/OLTP): RDS, Aurora - great for joins
 - NoSQL Database: DynamoDB (JSON), ElastiCache(key/value pairs), Neptune (graphs) -no joins, No SQL
 - Object Storage: S3 (for big object) / Glacier (for backup/archive)
 - Data Warehouse (=SQL Analytics/BI): Redshift (OLAP), Athena
 - Search: ElasticSearch (JSON) - free text, unstructured searches
 - Graphs: Neptune - dispplays relationships between data.
-----------------------
RDS
 - Managed Postgres, MySQL, Oracle, MS SQL
 - Must Provison EC2 instance & EBS volume Types.
 - Read replica and multi AZ
 - Security IAM, Security Group, KMS, SSL
 - Backup / Snapshot / Point in time restore.
 - Manage and Scheduled maintenance
 - Monitoreo con CloudWatch

 Casos de Uso: RDBMS/OLTP, perform SQL queries, transactions insert/delete/update
  5 Pilares:
  - Operations: small downtime when failover happends, when mantienance happends, escalar en replicas de lecturas implica intervención manual, cambios en la aplicación
  - Security: AWS responsable del OS, Nosotros de KMS, security groups, IAM policies, authorizing users in DB, using SSL
  - Reliability: Multi AZ feature, failover in case of failure.
  - Performance: Depende de la instancia de EC2, tipo de EBS, la habilidad para agregar replicas de lectura. No auto escala.
  - Cost: Paga por hora basado en la provición de EC2 e EBS

Aurora
 - Operations: less operations, auto scaling storage
 - Security: AWS responsable del OS, Nosotros de KMS, security groups, IAM policies, authorizing users in DB, using SSL
 - Reliability: Multi AZ, high available, possibly more than RDS, Aurora serverless option.
 - Performance: 5x performance (según AWS) por su arquitectura optimizada. Hasta 15 replicas de lectura (solo 5 para RDS)
 - Cost: Pay per hour based on EC2 and storage usage. Puede ser más barato que enterprise grad Oracle.

ElastiCache
 - Caso de uso: Key/Value store, frequent read, less write, cache results for DB queries, store session data for websites, cannot use SQL.
 - Operations: same as RDS
 - Security: AWS responsable del OS, Nosotros de KMS, security groups, IAM policies, users (Redis Auth), using SSL
 - Reliability: Multi AZ, Clustering
 - Performance: sub-milisecond performance, in memory, read replica for sharding, very popular cache option.
 - Cost: Pay per hour based on EC2 and storage usage.

DynamoDB
 - Caso de uso: Para aplicaciones Serverless (pequeños documentos 100s KB), distributed serverless cache, No tiene SQL query language, tiene capacidad de transacciones.
 - Operations: no operations needed, auto scaling capability, serverless.
 - Security: full security through IAM Policies, KMS encription, SSL in flight
 - Reliability: Multi AZ, Backups
 - Performance: single digit millisecond performance, DAX for caching reads, performance doesn't degrade if your application scales.
 - Cost: Pay per provisioned capaccity and storage usage (no need to guess in advance any capacity - can use autoscaling).

S3
 - Caso de uso: archivos estáticos, key value store para grandes archivos, hosting de Webs.
 - Operations: no operations needed
 - Security: IAM, Bucket Policies, ACL, Encryption (Server/Client), SSL
 - Reliability: 99.999999999% durability / 99.99% availability, Multi AZ, CRR
 - Performance: scales to thousands of read / writes per second, transfer acceleration / multi-part for big files
 - Cost: pay per storage usage, network cost, requests number

Athena
 - Caso de uso: archivos estáticos, key value store para grandes archivos, hosting de Webs.
 - Operations: no operations needed, serverless
 - Security: IAM + S3 security
 - Reliability: managed service, uses Presto engine, highly available
 - Performance: queries scale based on data size
 - Cost: pay per query / per TB of data scanned, serverless

Redshift
 - Es OLAP - online analytical processing (analytics and data Warehouse)
 - Caso de uso: Para Analytics/BI/Datawarehousing.
 - Operations: similar to RDS
 - Security: IAM, VPC, KMS, SSL (similar to RDS)
 - Reliability: highly available, auto healing features
 - Performance: 10x performance vs other data warehousing, compression
 - Cost: pay per node provisioned, 1/10th of the cost vs other warehous

Neptune - Graph database
 - Caso de uso: Social Networking, High relationship data.
 - Operations: similar to RDS
 - Security: IAM, VPC, KMS, SSL (similar to RDS) + IAM Authentication
 - Reliability: Multi-AZ, clustering
 - Performance: best suited for graphs, clustering to improve performance
 - Cost: pay per node provisioned (similar to RDS)

ElasticSearch
 - Seach any field, even partially matches. For Search or indexing.
 - Operations: similar to RDS
 - Security: Cognito, IAM, VPC, KMS, SSL
 - Reliability: Multi-AZ, clustering
 - Performance: based on ElasticSearch project (open source), petabyte scale
 - Cost: pay per node provisioned (similar to RDS)

---------------------------------
#################################
Monitoring AWS
#################################
---------------------------------
AWS CloudWatch Metric
 - CloudWatch provides metrics de todos los servicios en AWS.
 - Metric es la variable a monitorear (CPU utilizaction, NetworkIn, ...)
 - Las Metricas pertenece a un namespaces
 - Dimension es un atributo de la métrica (instance id, enviroment, etc.)
 - Hasta 10 dimensiones por metric
 - Metrics tiene timestamps
 - Se pueden crear Dashboard con metricas.

AWS CloudWatch EC2 Detailed Monitoring
 - EC2 por defecto cada 5 minutos
 - Con detailed monitoring (por un costo mayor) se tienen todos los datos cada 1 minuto
 - Se usa para scalar más rápido un ASG
 - AWS Free Tier permite 10 detailed monitoring  metrics.
 - EC2 Memory usage is by default not pushed (se tiene que hacer desde dentro de la instancia como un custom metric)

AWS CloudWatch Custom Metrics
 - Permite definit y enviar nuestra propias métricas a CloudWatch
 - Posibilidad de usar dimensiones (para segmentra métrics) - Instance.Id, Enviroment.name
 - Metric resolution
    - Standard: 1 minuto
    - High resolution: hasta 1 segunto (StorageResolution API parameter) - High cost
 - Use API call PutMetricData
 - Use exponencial back off in case of throtle errors.

AWS CloudWatch Dashboard
 - Quick access to keys metrics.
 - Dashboards are global
 - Dashboards can inclide graphs from different regions.
 - Change Time Zone & time range del dashboard
 - Setup automatic refresh (10s,1m,2m,5m,15m)
 - Pricing: 3 dashboard (con hasta 50 métricas) es gratis
    - U$S 3 por dashboard por mes
 AWS CloudWatch Logs
 - App pueden mandar logs a CloudWatch usando SDK
 - CloudWatcth can collect log from:
   - Elastic Beanstal: collection of logs from apps
   - ECS: collection form Containers
   - AWS Lambda: collectioin from functions logs
   - VPC Flow logs: VPC specific logs
   - API Gateway
   - CloudTrail based on filter.
   - CloudWatch log agents: for example on EC2 machine
   - Route53: Log DNS Queries.
  - CloudWath Logs puede ir a:
   - Batch exporter a S3 para archive
   - Stream to ElasticSearch cluster para mayor analítica.
 - Logs storage architecture:
   - Log Groups: arbitrary name, usually representing an application
   - Log stream: instances within application /log files/Containers
 - Se puede definir politicas de expiración
 - usar AWS Cli para tail CloudWatch log
 - Para enviar los logs a Cloudwatch, verificar bien las IAM permission correctos.
 - Security: Encription.
 - CloudWath Logs Metric Filter & Insights
   - CloudWath Logs puede usar filtros por expresiones
     - Ej: buscar una IP dento de un Log.
     - Metric Filters can be used to trigger Alarms
   - CloudWatch logs insights se usa para hacer queries en los logs y agregar los queries a los CloudWatch Dashboards.
CloudWatch Logs for EC2 
 - Hay que instalar un agente para enviar los logs a CloudWatch log.
 - Se pueden poner en servidores on-premise too.
 - Logs agents & Unified Agent
   - For virtual server EC2, on-premise,
     - Logs Agent - Old version, Only send to CloudWatch Logs
     - Unified Agent - Collect additional system metrics such as RAM, CPU, etc. / Collect logs to send to CloudWatch Logs / Centralized configuration using SSM Parameter Store.
   - CloudWatch Unified Agent - Metrics
      - On Linux servers para más granularidad.
       - CPU
       - Disk metrics
       - RAM
       - Netstat
       - Processes
       - Swap Space
AWS CloudWath Alarms 
  - Las alarmas están basadas en un trigger notification for a metric.
  - Las alarmas puede ira a un Auto Scaling, EC2 Actions, SNS notification
  - Varias opciones (sampling,%,max,min,etc...)
  - Estados de las alarmas: OK, INSUFFICIENT_DATA, ALARM
  - Periodo: Tiempo en segundos para evaluar la métrica
     High resolution custom metrics: can only choose 10 sec or 30 sec.

EC2 Instance Recovery with CloudWatch Alarms.
  - Status Check:
    - Instance Status= check the EC2 VM
    - System Status = check the underlying hardware.
    - Si la alarma StatusCheckFailed_System, ejecuta un EC2 Instance Recorvery.
    - Recovery: Same Private, Public, Elastic IP, metadata, placement group
      Los datos se pierden si no están en una EBS volume.

AWS ClouWatch Event
 - Schedule: Cron jobs
 - Event patterns: Event rules to react to a service doing something.
   - Ex: CodePipeline state chages"
 - Triggers to Lambda functions, SQS/SNS/Kinesis messages
 - CloudWatch Event creates a small JSON document  to give Information about the change.

AWS CloudTrail  
 - PRovee gobernanza, compliance y auditoria  para las AWS Accounut.
 - ClodTrail está habilitado por defecto.
 - Get an history of events / API Calls realizadas por: Consola,SDK, CLi, AWS Services.
 - Se pueden mandar todos a CloudWatch.
 - Si hay que ver que usuario hizo que cosa, primero ir a CloudTrail.

AWS Config
 - Ayuda con la auditoria y grabar compliacne de los AWS resources.
 - Sirve para grabar configuraciones y sus cambios en el tiempo.
 - Posibilidad de guardar los datos en S3 (analizarlos con Athena)
 - Que preguntas pueden ser resueltas por AWS Config?:
    - hay un acceso irrestricto ssh en mi security group?
    - My bucket tiene un acceso publico?
    - Como cambio mi configuración a ALB en el tiempo?
 - Se pueden recicibir alertas por SNS
 - AWS Config es un servicio por región
 - Se pueden centralizar a través de regiones y cuentas.
 AWS Config Rules
  - AWS Managed config rules (over 74)
  - Make custom config rules (Definidas con Lambda)
     - Evaluate if each EBS disk is of type gp2
  - Rules can be ebaluated/triggered:
     - For each config change
     - And/or: at regular time intervals.
     - Puede trigger un Evento de CloudWatch si la rule es non-compliant (and change with Lambda)
  - Rules can have auto remediations:
     - Se puede hacer un trigger de autoremediation
  - AWS Config Rules no previenen acciones para que pasen (no deny)
  - Pricing: no free tier.
CloudWath vs CloudTrail vs Config
• CloudWatch
  • Performance monitoring (metrics, CPU, network, etc…) & dashboards
  • Events & Alerting
  • Log Aggregation & Analysis
• CloudTrail
  • Record API calls made within your Account by everyone
  • Can define trails for specific resources
  • Global Service
• Config
  • Record configuration changes
  • Evaluate resources against compliance rules
  • Get timeline of changes and compliance
################################
IAM (Avanzado)
################################
AWS STS - Security Token service
 - Allows to grant limited and temporary access to AWS resources
 - Token is valid for up to 1 hour (must be refreshed)
 - Assume Role
     - Con sus own account: para mejorar la seguridad
     - Cross Account Access: asume el role en la cuenta target para realizar acciones
 - AssumeRoleWithSAML
     - return credentials for users logged with SAML
 - AssumeRoleWithWebIdentity
     - return creds para usuarios logieado con IdP (Facebook, Google, etc.)
     - AWS no recomienda esto, sino usar Cognito.
 - GetSessionToken
     - For MFA, para usuarios o AWS root account.
Using STS to Assume a Role
  - Definimos un IAM Role con nuesta cuenta
  - Ponemos los accesos en el Role.
  - Usamos AWS STS para dar las credencailes e impersonate el IAM Role (AssumeRole API)
  - Temp credencial.

Identity Federation in AWS 
 - Federaciones se puede hacer de muchas formas.
 - Usando federation, no es necesario crear IAM users, con creados fuera de AWS.
SAML 2.0
 - Para integrar AD / ADFS with AWS
 - Provides access to AWS Console.
 - No need to create an IAM users for each employee.
SAML 2.0 Federation - AD FS
 - Mismo proceso que con SAML 2.0
SAML 2.0 Federation
 - Se tiene que hacer un setup entre AWS IAM y SAML
 - SAML permite autenticación web y cross domain.
 - Uses the STS API
 - Es la "old way".

Custom Identity Broker Application
 - Para los que no son SAML 2.0
 - El identity broker debe determinar las IAM policy apropiadas.
 - Usa STS API: AssumeRole o GetFederationToken.

Web Identity Federation - AssumeRoleWithWebIdentity
 - No es recomendado por AWS - Hay que usar Cognito.

AWS Directory Services
 - AWS Managed Microsoft AD
   - Crear nuestro propio AD en AWS, soporta MFA
   - Establece una conección de confianza con el AD on-premise.
 - AD Connector (PROXY)
   - Directory Gateway (proxy) to redirect to on-premise AD.
   - Users are managed on the on-premise AD
 - Simple AD (Nada onpremise)
   - AD compatible administrado en AWS
   - No pude hacer join a on-premise AD

AWS Organizations (Servicio Global)
 - Permite manejar multiples AWS accounts.
 - La main account es la master.
 - La otras son cuentas miembros.
 - Las cuentas miembros solo pueden ser parte de una organización
 - Facturación Consolidada de todas las cuentas - single payment method
 - Pricing benefit aggregated usage.
 - API para automitaza la creación de AWS Accounts.

Multi Account Strategies
 - Crear cuenta por departamento, por centro de costos, dev/test/proc, por restricciones regulatorioas, para mejor resource isolation (VPC) , para poner limites, isolar para logging
 - Multi Account vs One Account Multi VPC.
 - Usar tag standar for billinig purprose
 - HAbilitar CloudTrail para todas las cuentas y enviar los a s3
 - Enviar CloudWatch Logs to central logging account.
 - Cross Account Roles for

Las cuentas se organizan en diferentes OU (Organization Units)
 - Se puede organizar por Unidad de negocio, Ambiente (test, prod, etc.), Proyectos

Service Control Policies (SCP)
 - Whitelist or Blacklist IAM actions
 - Se aplica por OU o Account level
 - No aplica a la Master Account.
 - SCP es aplicado a todos los usuarios y roles de la cuenta, incluido root.
 - SCP no afecta los service-linked
 - SCP mist have an explicit Allow (does not allow anything by default)
 - Casos de uso: Restringir el acceso a un servicio, Forzar PCI Compliance deshabiltiando servicios.

AWS Organization - Moving Accounts.
 - Sacar la cuenta de la vieja organización
 - Enviar invitación a la nueva organización
 - Aceptar la invitación de la nueva organización de un miembro

Para la master, sacar todas y se borra la vieja organización y se repite el proceso anterior.
La Master account se puede mover a cualquier OU dentro de la Organización. La identifica la estrella.

IAM Conditions
 - aws:SourceIP: - Restringe la IP del Client de las cuales se puede conectar a una API.
 - aws:RequestedRegion: - Restringe a que región se puede conectar (no importa donde está el cliente) es a que region quiere acceder para hacer que cosa.
 - Restrict basado en Tags.
 - Forzar el MFA 

IAM for S3
 - ListBucket es a nivel de bucket (no de objetos dentro del Bucket)
 - GetObjet, PutObject, /* a todos los objetos dentro del bucket.

IAM Roles vs Resource Based Policies
 - Aplicar una policy a un recurso vs aplicar los roles usados como proxy.
 - Con asumimos los roles, tenes tus permisoso originales y los permisos asignados por el rol.
 - Cuando usamos una Resource Based Policy, the principal doesn't have to give up his permissions.
 - RBP soportadas en: Amazon S3, SNS, SQS queues.

IAM Permission Boundaries
 - IAM Permission Boundaries es soportado para usuarios y roles.
 - Advanced feature to use a managed policy to set the maximum permissioin an IAM entity can get.
 - Se pueden combinar con AWS Organization SCP.
 - Use Cases:
    - Delegar responsabilidades a no adminsitradores (como crear nuevo usuarios)
    - Permitier a los desarrolladores para que se autoasignen policitcas y adminsitrar sus permisos.
    - Restingir a un solo usuario.
El explicit Deny es más que el Allow.

AWS Resource Access Manager (RAM)
 - Share AWS resources that you own with other AWS accounts.
 - Share with any account or within your Organization.
 - Para no tener recursos duplicados.
 - VPC Subnets:
    - allow to have all the resources launched in the same subnets
    - must be from the same AWS Organizations.
    - Cannot share security groups and default VPC
    - Participants can manage their own resources in there
    - Participants can't view, modify, delete resources that belong to other participants or the owner
  • AWS Transit Gateway
  • Route53 Resolver Rules
  • License Manager Configurations
Resource Access Manager - VPC example.
 - Cada cuenta tiene sus recursos, y no pude hacer nada con las otras
 - Pero las cuentas comparten la red del VPC. 
 - Pueden conectarse los recursos por sus Security Group.

AWS SSO
 - Administración centralizada para acceder a multiples cuentas o aplicaciones de terceros.
 - Integrada con AWS Organization
 - Soporta SAML 2.0 e integrado con AD on-premise.
 - Centralized permission management y auditoria con CloudTrail.
SSO vs AssumeRoleWithSAML
 - AssumeRoleWithSAML - Se maneja con STS y vamos al portal del 3ero para loginarse.
 - El login es el del SSO y ya está integrado y te devuelve las credenciales.

AWS Security & Encription

Why encryption?
Encryption in flight (SSL)
 - Esto es para evitar el MITM attack (Man in the middle)
 - SSL certificate HTTPS
Server side encryption at rest
 - El Dato es encriptado después de ser recibido en el servidor.
 - El Dato es desencriptado antes de ser enviado.
 - Los Keys de Encripción debe ser administradors y el servidor poder acceder a las mismas.
Client side encryption
 - El Dato es encriptada por el cliente y nunca desencriptado en el servidor.
 - Could leverage Envelope Encryption.

AWS KMS (Key Management Service)
 - Una forma sencilla de controla el acceso a los datos, KMS maneja los keys.
 - Totalmente integrado con IAM para autorizaciones.
 - Integrado con EBS, S3, Redshift, RDS, SSM
 - Se puede usar con el CLI/SDK
 - Los Keys son de una region especifica
- KMS - Customer Master Key (CMK) Types
 - Symmetric (AES-256 keys)
   - Los servicios de AWS integrados con KMS usan estos keys.
   - Necesario para Envelope encryption
   - Nunca tenemos acceso a la Key desencriptada (se tiene que usar la API para usar el key)
 - Asymmetric (RSA & ECC key pairs)
   - Public (Encripta) y Private key (Desencripta)
   - Public Key downloadable, but Private no se puede obtener desencriptada.
   - Se usa para encripción fuera de AWS que no pueden llamar a API de KMS.
AWS KMS (Key Manager Service)
 - Able to fully manage the keys and policies (Create, rotation policies, disable, enable)
 - Able to aduit key usage (using CloudTrail)
 - 3 tipos de Customer Master Key (CMK):
    - AWS Manage Service Default CMK: free
    - User Keys created in KMS: $1/month
    - User Keys imported (must be 256-bit simmetric key): $1/month
    + pago por API call to KMS (0,03/10000 calls)
AWS KMS 101
 - Anytime you need to share sensitive information ... KMS
    - Databes passwords
    - Credential externat service
    - Private Key of SSL certificate
 - Never ever store yout secrets in plaintext, especialy in code
 - Encrypted secrets puede guardarse en variables de ambiente o en el codigo.
 - KMS puede ayudar a encriptar hasta 4KB per call.
 - Si el dato es mayot a 4 KB hay que usar envelope encryption
 - Para dar acceso a KMS a alguien tenemos que:
    - Asegurarnos que la Key policy se lo permite al usuario
    - Que la IAM Policy permite la API Calls
Copying Snapshots across regions.
 - Se copia el snashot de una región a otra y se pone un nueva key en la nueva región.
 - Y luego recreamos el volumen del snapshot.
KMS Key Policies
 - similar por S3 bucket policies.
 - Difference: you cannot control access without them
 - Defaul KMS Key Policy:
   - Creado si no se especifica un KSM Key Policy.
   - Complete access to the key to the root user = entire AWS Account.
   - Gives access to the IAM Policies to the KMS key
 - Custom KMS Key Policy:
   - Definir usuarios, roles que pueden acceder al KMS Key
   - Definir quienes puede adminsitrar el key
   - Muy util para cross-account access de tus KMS key.
Copying Snapshots across accounts.

SSM Parameter Store
 - Secure Storage for configuration and secrets.
 - Optional Seamless Encryption using KMS.
 - Serverless, scalable, durable, easy SDK.
 - Version tracking de configurations and secrets.
 - Configuration Management usando path & IAM
 - Notifications con CloudWatch events
 - Integration with CloudFormation
SSM Parameter Store Hierarchy
 -/my-department/
   - my-app/
      - dev/
         - db-url
         - db-password
    - other-app/
  -/aws/refrence/secretsmanager/secret_ID_in_Secrets_Manager
  -/aws/service/ami-amazon-linux-latest/
2 Tiers SSM
 - Standard tier - 10.000 parametros/4KB/no paramater policies
 - Advanced tier - 100.000 parametros/8KB/parameter policies.
Parameters Policies (for advanced parameters)
 - Allow to assign a TTL to a parameter to force update or delete sensitive data.
 - Se pueden asignar multiples policies al mismo tiempo.

AWS Secrets Manager
 - Newer service, meant for storing secrets.
 - Force rotation of secrets in X days
 - Automate generation of secrets on rotation (Lambda)
 - Integration with Amazon RDS (MySQL, PostgreSQL, Aurora)
 - Secrets are encrypted using KMS
 - Si dice integrado con RDS y rotación de secretos, usar este servicio.
 - Si se ve en el exámen rotación de secretos, inovación en RDS/integración con RDS, es Secrets Manager.
 - Se asigna a una función lambda para rotar el secreto.

CloudHSM
 - KMS => AWS Manages the software for encryption
 - CloudHSM => AWS provisions encryption hardware
 - Dedicated Hardware / Uno maneja todas las claves de encripción.
 - HSM is tamper resistan, FIPS 140-2 Level 3 compliance
 - CloudHSM Clusters pueden estar en multiples AZ - must setup.
 - Soporta encripción simétrica y asimétrica.
 - No free tier available.
 - Se debe usar el CloudHSM Client software.
 - Redshift soporta CloudHSM
 - Una buena opción para usar SSE-C encription

AWS Shield
 - AWS Shield Standard:
    - Free Service.
    - Provides protection from attacks such as SYN/UDP Floods, Reflection attacks an other Layer 3 o 4 attacks
 - AWS Shield Advanced:
    - Servicio de DDoS opcional
    - Protect sobre ataques más sofisticados en EC2, ELB, CloudFront, Global Accelerator, Route 53.
    - 25/7 access to AWS DDoS response team 

AWS WAF
 - Protect sobre exploits de capa 7 /layer 7 is HTTP vs Layer 4 is TCP
 - Permite solo en 3 - Application Load Balancer, API Gateway, CloudFront
 - Define Web ACL
    - Rules can include: IP, HTTP header, HTTP Body, URI strings
    - Protect from commo attack - SQL injection, XSS
    - Size contrains, geo-match (block countries)
    - Rate-Based rules (para contar occurencia del evento) - Para DDoS
Shared Responsability Model
 - AWS - Security of the Cloud.
    - Protecting infra that runs all the AWS Services
    - Managed Services like S3, DynamoDB, RDS, etc.

 - Customer responsibility - Security en la nube
   - EC2, adminsitrar el OS del EC2, patches, updates, firewall, network, IAM, etc.

VPC
 - /32 es solo una IP
 - /24 = 255.255.255.0 - 
 - 172.16.0.0 (172.16.0.0/12) => Default in AWS

VPC Walkthrough
 - Todas las nuevas cuentas tiene un VPC default.
 - Las nuevas instancias son lanzadas dentro del VPC Default
 - Default VPC tiene conección a internet y todas las instancias tiene IP pública
 - public and private DNS name
Un VPC tiene subnets, route tables, e internet Gateway y Network ACL

- VPC (Virtual Private Cloud)
  - Hasta 5 VPC por región.
  - Max CIDR por VPC son 5. For each CIDR:
     - Min size/28 - 16 IPs 
     - Max size/16 = 65536 IPs  
  - Because VPC es privada, solo los rangos privados están disponibles:
     - 10.0.0.0 - 10.255.255.255 (10.0.0.0/8)
     - 172.16.0.0 - 172.31.255.255 (172.16.0.0/12)
     - 192.168.0.0 - 192.168.255.255 /16
  - Los CIDR no puede overlap con otras redes (ejemplo internas on premise)
- Tenancy, Default o Tenancy
- Las subnets son por Availability Zone.
  - AWS se reserva 5 IPs (las 4 iniciales y la última IP) en cada subnet
  - 0-Network Address
  - 1-VPC Router
  - 2-Mapping amazon DNS
  - 3-Reservado para uso futuro
  - 255-Broadcast address
  ExamTip:
    - 29 IPs /27 no va, hay que restar 5 (32) mínimo un /26 ... 59 IPs.
- Internet Gateway
  - Son lo que nos conectan a internet.
  - escala horizoantalemnte es HA y redundante
  - debe se creado separado del VPC
  - Un VPC puede estar atachado a un IGW y vicevesa.
  - IGW es a NAT for the instances that have public IPv4
  - IGW por si mismo no permite el acceso a intenet / Las Route tables también deben ser editadas.

- NAT Instances - Network Address Translate
  (outdated but stil at the exam)
  - Allows instances in the private subnets to connect to the internet
  - Must be launched in a public subnet
  - Must disable EC2 flag: Source / Destination Check
  - Must have Elastic IP attached to it
  - Route table must be configured to route traffic from private subnets to
  - Es una Linux AMI pre-configurada
  - No es HA / Hay que crear ASG in Multi AZ

- NAT Gateway
  - AWS Managed NAT, higher bandwith, better Availability, no admin
  - Pay by hour of usage and bandwith
  - NAT is created in specific AZ, usa un EIP
  - Cannot be used by an instance in that subnet. Requiere IGW.
  - Es resilente en un mismo AZ.
  - Para HA, must create mutiple NAT Gateway en multiples AZ para fault-tolerance.

- DNS Resolution in VPC
  - enableDNSSupport = DNS Resolution setting
     - Default True 
     - Siver para decidir si la resolución de DNS es soportada por el VPC.
     - Si es True, manda las consultas al DNS de AWS 169.254.169.253
  - enableDNSHostname = DNS Hostname setting
     - Default False
     - No hace nada haste que el enableDnsSupport se true.
     - Si es verdadero, asigna un hostname publico a la instancia de EC2.
  - Si usamos un custom DNS en un zona privada en Route 53, hay que setear ambos atributos en true.

Diferencias entre Network ACLs & security Group

 - NACL es antes de llegar al Security Group, porque es a nivel de subnet.
 - Primero evaluas la NACL de la Inbound rules y luego las del Security Group.
 - Outbound allowed stateful y luego el NACL Outbound rules (stateless)
 - En NACL Se fija siempre entrada y salida.
 - En

ECS - Está compuesto por:
  - ECS Core - Se da en un EC2
  - Fargate: Running ECS tasks (Serverless)
  - EKS: Running ECS on AWS Kubernetes (running on EC2)
  - ECR: Docker container Registry hosted por AWS.
Sobre ECS Core y ECR.
IAM Security en ECS tasks.

AWS ECS - Use Cases
 - Correr Microservicios
   - Muchos docker containers en la misma máquina.
   - Easy sevice discovery feature
   - Integración directa en ALB
   - Auto scaling capability
 - Run batch processing/scheduled tasks
   - Schedule ECS containers to run on On-Demand/Reserved/Spot instances.
 - Migrate application to the Cloud.

Conceptos.
 - 1ero. ECS Cluster: un set de EC2 instances.
 - 2do. ECS service: es una aplicación que corre en el ECS cluster.
 - 3ro. ECS tasks + definition: container running to create the application.

AWS ECS - ALB Integration
 - ALB tiene una integración directa con un feature llamado "port mapping"
 - Permite correr multiples instancias de la misma aplicacion en la misma EC2 machine.
 - Use cases:
    - Increased resiliency.
    - Maximiza CPU utilization.
    - Ability to perform rolling upgrades without impacting applpication uptime.
AWS ECS - ECS Setup & Config file
 - Ejecutamos un EC2, se intala el ECS agent con un ECS config file.
 - Linux AMI tiene el ECS agent.
 - ECS config file /etc/ecs/ecs.config
   ECS_CLUSTER=
   ECS_ENGINE_AUTH_DATA= #para mandar imagenes a registry privadas.
   ECS_AVAILABLE_LOGGING_DRIVERS= #Clodwath cotainer logging.
   ECS_ENABLE_TASK_IAM_ROLE=true (habilitar IAM para ECS tasks) - El más importante.
AWS ECR - Elastic Container Registry.
 - Se mandan por HTTPS, full encription.
 - Push Image - AWS CodeBuild CICD.
ECS - IAM Task Roles
 - EC2 instance role es un IAM role que le permite acceder al ECS service (for the ECS Agent)
   Ese rol se hereda a todos las tasks de ese EC2
 - ECS Task role para cada ECS task para realizar las API Calls.
 - Todo para una Aplicación.
 - Se usa el "taskRoleArn" parameter en la task definition.
Fargate
 - Con Fargate es todo Serverless.
 - No necesitamos aprovisionar EC2 instances.
 - Se crean task definitions y corre nuestos containers.
 - Para escalar, solo incrementar el task number.

EKS Overview
 - Es para lanzar y adminsitrar Clusters de Kubernetes en AWS.
 - Es una alternativa a ECS, similar goal but different API.
 - EKS soporta EC2 para los Worker nodes o Fargate para containers serverless.
Casos de uso: Si ya tenemos Kubernetes on premise o en otra nube y quieren migrar a AWS usando kubernetes.

AWS Step functions
 - Build severless visual workflow to orchestrate las funciones Lambda.
 - El Flujo se representa como un JSON "State machine".
 - Features: sequence, parallel, conditions, timeouts, erro handling...
 - Se puede integrar con EC2, ECS, On premise, API Gateway
 - Maximum execution time of 1 year.
 - Possibiliti to implement human approval.
 - Use Cases:
    - Data Processing, Web app, any workflow.
 - Visual workflow in Step Functions.

AWS SWF - Simple Workflow Service
 - Coordinar el trabajo entre aplicaciones.
 - El codigo corre en EC2 (no serverless). 1 year max runtime.
 - "active step" y "decision step".
 - Tiene "human intervention" step.
 - Step Functions es recomendado para nuevas aplicaciones, excepto:
    - External signal para intervenir en el proceso.
    - child process that return value to parent process.

Amazon EMR
 - EMR - Elastic MapReduce.
 - EMR helps creating Hadoop clusters to analyze and process vas amount of data.
 - El Cluster puede estar hecho por cientos de EC2.
 - Soporta Apache Spark, HBase, Presto, Flink ...
 - EMR se ocupa de aprovisionar y configurar todo.
 - Auto-scaling e integrado con Spot-instances.
 - Use cas: data processing, machine learning, web index, big data.

AWS Glue
 - Full Managed ETL (Extract, tranform, Load) service.
 - Automating time consuming steps of data preparation for analysis.
 - Serverless, pay as you go, fully managed, sobre apache spark.
 - Crawls data sources (schema inference)
 - Automated Code Generation.
 - Sources: Amazon Aurora, RDS, Redshift & S3.
 - Glue Data Catalog: Metadata of the Source Tables.

AWS Opsworks
 - Chef & Puppet Managed.
 - Alternative to AWS SSM.
 - Si necesitamos Chef & Puppet need AWS Opsworks.
 - Sirven para Configuration as Code.
 - Works on Linux/Windows.
 - Se pueden automatizar: cuentas de usuarios, ntp, cron, packages, devices...
 - "Recipes" en Chef y "Manifest" en Puppet.
 - Son porque son Open Source para todos.

AWS ElasticTrasncoder
 - Convert media files en varios formatos apra Tablets, PC, Smartphone.
 - bit rate, thumbnail, watermark, DRM, encryption, progressive download.
 - 4 componentes
    - Jobs:
    - Pipelines:
    - Presets: Template for converting media.
    - Notificaciones
 - Pay for what you use, scale automatic, fully managed.

AWS WorkSpcaces
 - MAnaged Secure Cloud Desktop.
 - On Demand, pay per by usage.
 - Elimintate on premise VDI.
 - Integrate with AD
 - Secure, Encrypted, Newtok Isolation.

AWS AppSync
 - Store and sync data across mobile and web apps en tiempo real.
 - Una GraphQL en backend.
 - Client Code can be generated automatically.
 - Integration con DynamoDB/Lambda
 - Real time subscriptions
 - Offline data sync (replace Cognito Sync)
 - Fine Grained Security.

Well Architected Framework
 - Stop guessing your capacity needs.
 - Test systemas at production scale.
 - Automatiza para experimentación fácil
 - Permitir evolucionar la arquitectura.
 - Drive Architecture usign data.
 - Improve through game days.

5 Pillas:
  - Operational Excellence
  - Security
  - Reliability
  - Performance Efficiency
  - Cost Optimization

  - No se balancean, Son Synergy.

Questions:
  - Well-Architectured Tool.

Operational Excellence
AWS Services
 Prepare
   AWS CloudFormation, AWS Config
 Operate
   CloudFormation, Config, CloudTrail, CloudWatch, X-Ray (API Calls monitoring)
 Evolve
   CloudFormation, CodeBuild, CodeCommit, CodeDeploy, CodePipeline

Security

Trysted Advisor
 - No todo es gratis.
 - Se puede habilitar un email semanal desde la consola.
 - Full Trusted Advisor - disponible para Busness and Enterprise support plans.
   - Envia alarmas a través de Cloudwatch cuande se llega al límite.

------------------------
Practice makes perfect
------------------------
Hands on siempres es mejor.

Primero  por eliminación - sacar mejor las que no son.
Hay varias trick questions.
Si pensamos que es algo muy rebuscado complicado, seguramente está mal.

Skim the AWS Whitepapers.
Read each services FAQ.

Meterse en la AWS Community. Do the practice test in this section.
re-invent videos on Youtube.




